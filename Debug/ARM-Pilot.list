
ARM-Pilot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000669c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080067ac  080067ac  000167ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d8  080067d8  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  080067d8  080067d8  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067d8  080067d8  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d8  080067d8  000167d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080067e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  200000b8  08006898  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08006898  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016014  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003422  00000000  00000000  000360f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  00039518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003a888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004476  00000000  00000000  0003ba98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6f5  00000000  00000000  0003ff0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af20c  00000000  00000000  0005a603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010980f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005328  00000000  00000000  00109860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b8 	.word	0x200000b8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006794 	.word	0x08006794

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000bc 	.word	0x200000bc
 800014c:	08006794 	.word	0x08006794

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpun>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__aeabi_fcmpun+0x14>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d108      	bne.n	8000f5a <__aeabi_fcmpun+0x26>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d102      	bne.n	8000f54 <__aeabi_fcmpun+0x20>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d102      	bne.n	8000f5a <__aeabi_fcmpun+0x26>
 8000f54:	f04f 0000 	mov.w	r0, #0
 8000f58:	4770      	bx	lr
 8000f5a:	f04f 0001 	mov.w	r0, #1
 8000f5e:	4770      	bx	lr

08000f60 <gyro_read_raw>:
#endif
#ifdef I2C
static void I2C_write(uint8_t *data,uint8_t len);
static void I2C_read(uint8_t *data,uint8_t len);
#endif
int gyro_read_raw(axis3_t *k){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	6078      	str	r0, [r7, #4]
	  axis3_t p_val = *k;
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	6810      	ldr	r0, [r2, #0]
 8000f70:	6018      	str	r0, [r3, #0]
 8000f72:	8892      	ldrh	r2, [r2, #4]
 8000f74:	809a      	strh	r2, [r3, #4]
	  uint8_t buffe[6];
	  buffe[0] = (uint8_t)GYRO_DATA_REG;
 8000f76:	2343      	movs	r3, #67	; 0x43
 8000f78:	723b      	strb	r3, [r7, #8]
#ifdef I2C
	  HAL_I2C_Master_Transmit(&I2C_PORT,IMU_DEV_REG,buffe,1,1);
 8000f7a:	f107 0208 	add.w	r2, r7, #8
 8000f7e:	2301      	movs	r3, #1
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	21d0      	movs	r1, #208	; 0xd0
 8000f86:	4821      	ldr	r0, [pc, #132]	; (800100c <gyro_read_raw+0xac>)
 8000f88:	f002 fc46 	bl	8003818 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&I2C_PORT,IMU_DEV_REG,buffe,6,1);
 8000f8c:	f107 0208 	add.w	r2, r7, #8
 8000f90:	2301      	movs	r3, #1
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2306      	movs	r3, #6
 8000f96:	21d0      	movs	r1, #208	; 0xd0
 8000f98:	481c      	ldr	r0, [pc, #112]	; (800100c <gyro_read_raw+0xac>)
 8000f9a:	f002 fd3b 	bl	8003a14 <HAL_I2C_Master_Receive>
	  HAL_SPI_Transmit(&SPI_PORT,&buffe[0],1,1);
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
#endif

	  k->x = (int16_t)buffe[0]<<8|buffe[1];
 8000f9e:	7a3b      	ldrb	r3, [r7, #8]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	7a7b      	ldrb	r3, [r7, #9]
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	801a      	strh	r2, [r3, #0]
	  k->y = (int16_t)buffe[2]<<8|buffe[3];
 8000fb0:	7abb      	ldrb	r3, [r7, #10]
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	7afb      	ldrb	r3, [r7, #11]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	805a      	strh	r2, [r3, #2]
	  k->z = (int16_t)buffe[4]<<8|buffe[5];
 8000fc2:	7b3b      	ldrb	r3, [r7, #12]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	7b7b      	ldrb	r3, [r7, #13]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	809a      	strh	r2, [r3, #4]

	  if((p_val.x == k->x)&&(p_val.y == k->y)&&(p_val.z == k->z)){
 8000fd4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d10f      	bne.n	8001002 <gyro_read_raw+0xa2>
 8000fe2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d108      	bne.n	8001002 <gyro_read_raw+0xa2>
 8000ff0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d101      	bne.n	8001002 <gyro_read_raw+0xa2>
		return 1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <gyro_read_raw+0xa4>
	  }
	  return 0;
 8001002:	2300      	movs	r3, #0
	}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200001c0 	.word	0x200001c0

08001010 <acc_read_raw>:

int acc_read_raw(axis3_t *k){
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af02      	add	r7, sp, #8
 8001016:	6078      	str	r0, [r7, #4]
	axis3_t p_val =*k;
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	6810      	ldr	r0, [r2, #0]
 8001020:	6018      	str	r0, [r3, #0]
 8001022:	8892      	ldrh	r2, [r2, #4]
 8001024:	809a      	strh	r2, [r3, #4]
	uint8_t buffe[6];
	buffe[0] = (uint8_t)ACC_DATA_REG;
 8001026:	233b      	movs	r3, #59	; 0x3b
 8001028:	723b      	strb	r3, [r7, #8]
#ifdef I2C
	HAL_I2C_Master_Transmit(&I2C_PORT,IMU_DEV_REG,buffe,1,1);
 800102a:	f107 0208 	add.w	r2, r7, #8
 800102e:	2301      	movs	r3, #1
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21d0      	movs	r1, #208	; 0xd0
 8001036:	4821      	ldr	r0, [pc, #132]	; (80010bc <acc_read_raw+0xac>)
 8001038:	f002 fbee 	bl	8003818 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&I2C_PORT,IMU_DEV_REG,buffe,6,1);
 800103c:	f107 0208 	add.w	r2, r7, #8
 8001040:	2301      	movs	r3, #1
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2306      	movs	r3, #6
 8001046:	21d0      	movs	r1, #208	; 0xd0
 8001048:	481c      	ldr	r0, [pc, #112]	; (80010bc <acc_read_raw+0xac>)
 800104a:	f002 fce3 	bl	8003a14 <HAL_I2C_Master_Receive>
	  HAL_SPI_Receive(&SPI_PORT,buffe,6,1);
	  HAL_GPIO_WritePin(SPI_MPU_GPIO_PORT,SPI_MPU_GPIO_CS_PIN,GPIO_PIN_SET);
*/
      SPI_read(buffe[0],buffe,14);
#endif
	  k->x = (int16_t)buffe[0]<<8|buffe[1];
 800104e:	7a3b      	ldrb	r3, [r7, #8]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21a      	sxth	r2, r3
 8001054:	7a7b      	ldrb	r3, [r7, #9]
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b21a      	sxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	801a      	strh	r2, [r3, #0]
	  k->y = (int16_t)buffe[2]<<8|buffe[3];
 8001060:	7abb      	ldrb	r3, [r7, #10]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21a      	sxth	r2, r3
 8001066:	7afb      	ldrb	r3, [r7, #11]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	805a      	strh	r2, [r3, #2]
	  k->z = (int16_t)buffe[4]<<8|buffe[5];
 8001072:	7b3b      	ldrb	r3, [r7, #12]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b21a      	sxth	r2, r3
 8001078:	7b7b      	ldrb	r3, [r7, #13]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21a      	sxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	809a      	strh	r2, [r3, #4]

      if((p_val.x == k->x)&&(p_val.y == k->y)&&(p_val.z == k->z)){
 8001084:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108e:	429a      	cmp	r2, r3
 8001090:	d10f      	bne.n	80010b2 <acc_read_raw+0xa2>
 8001092:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800109c:	429a      	cmp	r2, r3
 800109e:	d108      	bne.n	80010b2 <acc_read_raw+0xa2>
 80010a0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d101      	bne.n	80010b2 <acc_read_raw+0xa2>
		return 1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <acc_read_raw+0xa4>
	  }
	  return 0;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200001c0 	.word	0x200001c0

080010c0 <mpu6500_init>:
	gyr->x = (int16_t)buffe[8]<<8|buffe[9];
	gyr->y = (int16_t)buffe[10]<<8|buffe[11];
	gyr->z = (int16_t)buffe[12]<<8|buffe[12];
}
// user configurations
void mpu6500_init(){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af02      	add	r7, sp, #8
	data[1] = (uint8_t)(ACC_2G<<3);
    SPI_write(&data,2);
#endif
#ifdef I2C
	uint8_t buffer[6];
    buffer[0] = MPU_RA_PWR_MGMT_1; 
 80010c6:	236b      	movs	r3, #107	; 0x6b
 80010c8:	703b      	strb	r3, [r7, #0]
  	buffer[1] = RESET_REG;
 80010ca:	2300      	movs	r3, #0
 80010cc:	707b      	strb	r3, [r7, #1]
  	HAL_I2C_Master_Transmit(&I2C_PORT,IMU_DEV_REG,buffer,2,1);
 80010ce:	463a      	mov	r2, r7
 80010d0:	2301      	movs	r3, #1
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2302      	movs	r3, #2
 80010d6:	21d0      	movs	r1, #208	; 0xd0
 80010d8:	480f      	ldr	r0, [pc, #60]	; (8001118 <mpu6500_init+0x58>)
 80010da:	f002 fb9d 	bl	8003818 <HAL_I2C_Master_Transmit>
    
  	//buffer[0] = CONFIGURATION;
  	//buffer[1] = (HZ_5<<0);
  	//HAL_I2C_Master_Transmit(&I2C_PORT,IMU_DEV_REG,buffer,2,1);

	buffer[0] = GYRO_REG_CONFIG;
 80010de:	231b      	movs	r3, #27
 80010e0:	703b      	strb	r3, [r7, #0]
  	buffer[1] = (GYRO_1000dps<<3);
 80010e2:	2310      	movs	r3, #16
 80010e4:	707b      	strb	r3, [r7, #1]
  	HAL_I2C_Master_Transmit(&I2C_PORT,IMU_DEV_REG,buffer,2,1);
 80010e6:	463a      	mov	r2, r7
 80010e8:	2301      	movs	r3, #1
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2302      	movs	r3, #2
 80010ee:	21d0      	movs	r1, #208	; 0xd0
 80010f0:	4809      	ldr	r0, [pc, #36]	; (8001118 <mpu6500_init+0x58>)
 80010f2:	f002 fb91 	bl	8003818 <HAL_I2C_Master_Transmit>

  	buffer[0] = ACC_REG_CONFIG;
 80010f6:	231c      	movs	r3, #28
 80010f8:	703b      	strb	r3, [r7, #0]
  	buffer[1] = (ACC_16G<<3);
 80010fa:	2318      	movs	r3, #24
 80010fc:	707b      	strb	r3, [r7, #1]
  	HAL_I2C_Master_Transmit(&I2C_PORT,IMU_DEV_REG,buffer,2,1);
 80010fe:	463a      	mov	r2, r7
 8001100:	2301      	movs	r3, #1
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2302      	movs	r3, #2
 8001106:	21d0      	movs	r1, #208	; 0xd0
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <mpu6500_init+0x58>)
 800110a:	f002 fb85 	bl	8003818 <HAL_I2C_Master_Transmit>
#endif
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200001c0 	.word	0x200001c0

0800111c <ms5611_init>:
static uint32_t baro_timer;
static float seaLevelPress;
static uint8_t readStep;

void ms5611_init(I2C_HandleTypeDef *hi2c2)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
    hi2c = hi2c2;
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <ms5611_init+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
    readStep = 0;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <ms5611_init+0x60>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
    baro_timer = millis();
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <ms5611_init+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a13      	ldr	r2, [pc, #76]	; (8001184 <ms5611_init+0x68>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	099b      	lsrs	r3, r3, #6
 800113c:	4a12      	ldr	r2, [pc, #72]	; (8001188 <ms5611_init+0x6c>)
 800113e:	6013      	str	r3, [r2, #0]
    // reset sensor
    ms5611_reset();
 8001140:	f000 f826 	bl	8001190 <ms5611_reset>
    // read all coefficients
    for (int i = 0; i < PROM_NB; i++)
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	e00d      	b.n	8001166 <ms5611_init+0x4a>
        ms5611_c[i] = ms5611_prom(i);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	b25b      	sxtb	r3, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f836 	bl	80011c0 <ms5611_prom>
 8001154:	4603      	mov	r3, r0
 8001156:	4619      	mov	r1, r3
 8001158:	4a0c      	ldr	r2, [pc, #48]	; (800118c <ms5611_init+0x70>)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < PROM_NB; i++)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3301      	adds	r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2b07      	cmp	r3, #7
 800116a:	ddee      	ble.n	800114a <ms5611_init+0x2e>
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200000e8 	.word	0x200000e8
 800117c:	200000f0 	.word	0x200000f0
 8001180:	200000d4 	.word	0x200000d4
 8001184:	10624dd3 	.word	0x10624dd3
 8001188:	200000ec 	.word	0x200000ec
 800118c:	200000d8 	.word	0x200000d8

08001190 <ms5611_reset>:
static void ms5611_reset(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af02      	add	r7, sp, #8
	uint8_t data = CMD_RESET;
 8001196:	231e      	movs	r3, #30
 8001198:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(hi2c,MS5611_ADDR,&data,1,1);
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <ms5611_reset+0x2c>)
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	1dfa      	adds	r2, r7, #7
 80011a0:	2301      	movs	r3, #1
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	21ee      	movs	r1, #238	; 0xee
 80011a8:	f002 fb36 	bl	8003818 <HAL_I2C_Master_Transmit>
    HAL_Delay(2);
 80011ac:	2002      	movs	r0, #2
 80011ae:	f001 ff07 	bl	8002fc0 <HAL_Delay>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200000e8 	.word	0x200000e8

080011c0 <ms5611_prom>:

static uint16_t ms5611_prom(int8_t coef_num)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
    uint8_t rxbuf[2] = { 0, 0 };
 80011ca:	2300      	movs	r3, #0
 80011cc:	81bb      	strh	r3, [r7, #12]
    HAL_I2C_Mem_Read(hi2c,MS5611_ADDR,CMD_PROM_RD + coef_num * 2,1,rxbuf,2,1);
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <ms5611_prom+0x4c>)
 80011d0:	6818      	ldr	r0, [r3, #0]
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	3350      	adds	r3, #80	; 0x50
 80011d8:	b29b      	uxth	r3, r3
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	b29a      	uxth	r2, r3
 80011de:	2301      	movs	r3, #1
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	2302      	movs	r3, #2
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2301      	movs	r3, #1
 80011ee:	21ee      	movs	r1, #238	; 0xee
 80011f0:	f002 fe7c 	bl	8003eec <HAL_I2C_Mem_Read>
    return rxbuf[0] << 8 | rxbuf[1];
 80011f4:	7b3b      	ldrb	r3, [r7, #12]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	7b7b      	ldrb	r3, [r7, #13]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b21b      	sxth	r3, r3
 8001202:	b29b      	uxth	r3, r3
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200000e8 	.word	0x200000e8

08001210 <gyro_read>:
        src->y = src->y / length;
        src->z = src->z / length;
    }
}
// gyro read and calibrate
void gyro_read(faxis3_t *angle){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b08b      	sub	sp, #44	; 0x2c
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	axis3_t p;
	static float gyro_v[3];
	if(gyro_read_raw(&p)){
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fe9f 	bl	8000f60 <gyro_read_raw>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	f040 809e 	bne.w	8001366 <gyro_read+0x156>
		return;
	}
	float RC = 1.0f / (2 *M_PIf *config.gyro_f_cut);
 800122a:	4b51      	ldr	r3, [pc, #324]	; (8001370 <gyro_read+0x160>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4951      	ldr	r1, [pc, #324]	; (8001374 <gyro_read+0x164>)
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fcb9 	bl	8000ba8 <__aeabi_fmul>
 8001236:	4603      	mov	r3, r0
 8001238:	4619      	mov	r1, r3
 800123a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800123e:	f7ff fd67 	bl	8000d10 <__aeabi_fdiv>
 8001242:	4603      	mov	r3, r0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    float temp = (float)config.dt*(1e-06f);
 8001246:	4b4a      	ldr	r3, [pc, #296]	; (8001370 <gyro_read+0x160>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fc54 	bl	8000af8 <__aeabi_ui2f>
 8001250:	4603      	mov	r3, r0
 8001252:	4949      	ldr	r1, [pc, #292]	; (8001378 <gyro_read+0x168>)
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fca7 	bl	8000ba8 <__aeabi_fmul>
 800125a:	4603      	mov	r3, r0
 800125c:	623b      	str	r3, [r7, #32]
	float gain_lpf =temp / (RC + temp);
 800125e:	6a39      	ldr	r1, [r7, #32]
 8001260:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001262:	f7ff fb99 	bl	8000998 <__addsf3>
 8001266:	4603      	mov	r3, r0
 8001268:	4619      	mov	r1, r3
 800126a:	6a38      	ldr	r0, [r7, #32]
 800126c:	f7ff fd50 	bl	8000d10 <__aeabi_fdiv>
 8001270:	4603      	mov	r3, r0
 8001272:	61fb      	str	r3, [r7, #28]


	float x_  = ((float)(p.x))/config.gyr_lsb;
 8001274:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fc41 	bl	8000b00 <__aeabi_i2f>
 800127e:	4602      	mov	r2, r0
 8001280:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <gyro_read+0x160>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4619      	mov	r1, r3
 8001286:	4610      	mov	r0, r2
 8001288:	f7ff fd42 	bl	8000d10 <__aeabi_fdiv>
 800128c:	4603      	mov	r3, r0
 800128e:	61bb      	str	r3, [r7, #24]
	float y_ =  ((float)(p.y))/config.gyr_lsb;
 8001290:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fc33 	bl	8000b00 <__aeabi_i2f>
 800129a:	4602      	mov	r2, r0
 800129c:	4b34      	ldr	r3, [pc, #208]	; (8001370 <gyro_read+0x160>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4610      	mov	r0, r2
 80012a4:	f7ff fd34 	bl	8000d10 <__aeabi_fdiv>
 80012a8:	4603      	mov	r3, r0
 80012aa:	617b      	str	r3, [r7, #20]
	float z_  = ((float)(p.z))/config.gyr_lsb;
 80012ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fc25 	bl	8000b00 <__aeabi_i2f>
 80012b6:	4602      	mov	r2, r0
 80012b8:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <gyro_read+0x160>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4619      	mov	r1, r3
 80012be:	4610      	mov	r0, r2
 80012c0:	f7ff fd26 	bl	8000d10 <__aeabi_fdiv>
 80012c4:	4603      	mov	r3, r0
 80012c6:	613b      	str	r3, [r7, #16]

    gyro_v[X] = gyro_v[X] + gain_lpf*(x_ - gyro_v[X]);
 80012c8:	4b2c      	ldr	r3, [pc, #176]	; (800137c <gyro_read+0x16c>)
 80012ca:	681c      	ldr	r4, [r3, #0]
 80012cc:	4b2b      	ldr	r3, [pc, #172]	; (800137c <gyro_read+0x16c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	69b8      	ldr	r0, [r7, #24]
 80012d4:	f7ff fb5e 	bl	8000994 <__aeabi_fsub>
 80012d8:	4603      	mov	r3, r0
 80012da:	69f9      	ldr	r1, [r7, #28]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fc63 	bl	8000ba8 <__aeabi_fmul>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4619      	mov	r1, r3
 80012e6:	4620      	mov	r0, r4
 80012e8:	f7ff fb56 	bl	8000998 <__addsf3>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <gyro_read+0x16c>)
 80012f2:	601a      	str	r2, [r3, #0]
    gyro_v[Y] = gyro_v[Y] + gain_lpf*(y_ - gyro_v[Y]);
 80012f4:	4b21      	ldr	r3, [pc, #132]	; (800137c <gyro_read+0x16c>)
 80012f6:	685c      	ldr	r4, [r3, #4]
 80012f8:	4b20      	ldr	r3, [pc, #128]	; (800137c <gyro_read+0x16c>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	4619      	mov	r1, r3
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff fb48 	bl	8000994 <__aeabi_fsub>
 8001304:	4603      	mov	r3, r0
 8001306:	69f9      	ldr	r1, [r7, #28]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fc4d 	bl	8000ba8 <__aeabi_fmul>
 800130e:	4603      	mov	r3, r0
 8001310:	4619      	mov	r1, r3
 8001312:	4620      	mov	r0, r4
 8001314:	f7ff fb40 	bl	8000998 <__addsf3>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <gyro_read+0x16c>)
 800131e:	605a      	str	r2, [r3, #4]
    gyro_v[Z] = gyro_v[Z] + gain_lpf*(z_ - gyro_v[Z]);
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <gyro_read+0x16c>)
 8001322:	689c      	ldr	r4, [r3, #8]
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <gyro_read+0x16c>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	4619      	mov	r1, r3
 800132a:	6938      	ldr	r0, [r7, #16]
 800132c:	f7ff fb32 	bl	8000994 <__aeabi_fsub>
 8001330:	4603      	mov	r3, r0
 8001332:	69f9      	ldr	r1, [r7, #28]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fc37 	bl	8000ba8 <__aeabi_fmul>
 800133a:	4603      	mov	r3, r0
 800133c:	4619      	mov	r1, r3
 800133e:	4620      	mov	r0, r4
 8001340:	f7ff fb2a 	bl	8000998 <__addsf3>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <gyro_read+0x16c>)
 800134a:	609a      	str	r2, [r3, #8]

    angle->x = gyro_v[X];
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <gyro_read+0x16c>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	601a      	str	r2, [r3, #0]
    angle->y = gyro_v[Y];
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <gyro_read+0x16c>)
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	605a      	str	r2, [r3, #4]
    angle->z = gyro_v[Z];
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <gyro_read+0x16c>)
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	e000      	b.n	8001368 <gyro_read+0x158>
		return;
 8001366:	bf00      	nop
}
 8001368:	372c      	adds	r7, #44	; 0x2c
 800136a:	46bd      	mov	sp, r7
 800136c:	bd90      	pop	{r4, r7, pc}
 800136e:	bf00      	nop
 8001370:	20000004 	.word	0x20000004
 8001374:	40c90fdb 	.word	0x40c90fdb
 8001378:	358637bd 	.word	0x358637bd
 800137c:	2000019c 	.word	0x2000019c

08001380 <gyro_zero_offset>:
static int32_t store_gyro[3];
void gyro_zero_offset(){
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
	axis3_t gyro_;
	int16_t count_ = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<OFFSET_CYCLE;i++){
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	e027      	b.n	80013e0 <gyro_zero_offset+0x60>
		if(!gyro_read_raw(&gyro_)){
 8001390:	463b      	mov	r3, r7
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fde4 	bl	8000f60 <gyro_read_raw>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d11a      	bne.n	80013d4 <gyro_zero_offset+0x54>
			count_++;
 800139e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3301      	adds	r3, #1
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	81fb      	strh	r3, [r7, #14]
			store_gyro[X] += gyro_.x;
 80013aa:	4b21      	ldr	r3, [pc, #132]	; (8001430 <gyro_zero_offset+0xb0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f9b7 2000 	ldrsh.w	r2, [r7]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a1e      	ldr	r2, [pc, #120]	; (8001430 <gyro_zero_offset+0xb0>)
 80013b6:	6013      	str	r3, [r2, #0]
	    	store_gyro[Y] += gyro_.y;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <gyro_zero_offset+0xb0>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <gyro_zero_offset+0xb0>)
 80013c4:	6053      	str	r3, [r2, #4]
	    	store_gyro[Z] += gyro_.z;
 80013c6:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <gyro_zero_offset+0xb0>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	4a17      	ldr	r2, [pc, #92]	; (8001430 <gyro_zero_offset+0xb0>)
 80013d2:	6093      	str	r3, [r2, #8]
		}
		delay_ms(1);
 80013d4:	2001      	movs	r0, #1
 80013d6:	f000 ff73 	bl	80022c0 <delay_ms>
	for(int i=0;i<OFFSET_CYCLE;i++){
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3301      	adds	r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013e6:	dbd3      	blt.n	8001390 <gyro_zero_offset+0x10>
	}

    if(count_ != 0){
 80013e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d01a      	beq.n	8001426 <gyro_zero_offset+0xa6>
      gyr_offs_x = store_gyro[X]/count_;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <gyro_zero_offset+0xb0>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <gyro_zero_offset+0xb4>)
 8001400:	801a      	strh	r2, [r3, #0]
      gyr_offs_y = store_gyro[Y]/count_;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <gyro_zero_offset+0xb0>)
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800140a:	fb92 f3f3 	sdiv	r3, r2, r3
 800140e:	b21a      	sxth	r2, r3
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <gyro_zero_offset+0xb8>)
 8001412:	801a      	strh	r2, [r3, #0]
      gyr_offs_z = store_gyro[Z]/count_;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <gyro_zero_offset+0xb0>)
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800141c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001420:	b21a      	sxth	r2, r3
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <gyro_zero_offset+0xbc>)
 8001424:	801a      	strh	r2, [r3, #0]
    }
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000190 	.word	0x20000190
 8001434:	20000188 	.word	0x20000188
 8001438:	2000018a 	.word	0x2000018a
 800143c:	2000018c 	.word	0x2000018c

08001440 <mpu_init>:

void mpu_init()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
   mpu6500_init();
 8001444:	f7ff fe3c 	bl	80010c0 <mpu6500_init>
   HAL_Delay(3000);
 8001448:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800144c:	f001 fdb8 	bl	8002fc0 <HAL_Delay>
   gyro_zero_offset();
 8001450:	f7ff ff96 	bl	8001380 <gyro_zero_offset>
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <ahrs_update>:
    acc.y = acce.y*length;
    acc.z = acce.z*length;
	m->pitch  = atan2_approx(acc.y,acc.z)*180/M_PIf;
	m->roll   = atan2_approx(-acc.x, (1/invSqrt_(acc.y * acc.y + acc.z * acc.z)))*180/M_PIf;
}
void ahrs_update(){
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b09a      	sub	sp, #104	; 0x68
 800145c:	af00      	add	r7, sp, #0
	float acc_Bframe[3];
	float hx,hy,bx,bz;
    float wx,wy,wz,mx,my,mz;
	float emx,emy,emz;

    gyro_read(&gyr);
 800145e:	48a2      	ldr	r0, [pc, #648]	; (80016e8 <ahrs_update+0x290>)
 8001460:	f7ff fed6 	bl	8001210 <gyro_read>
	gx = gyr.x * RAD;
 8001464:	4ba0      	ldr	r3, [pc, #640]	; (80016e8 <ahrs_update+0x290>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	49a0      	ldr	r1, [pc, #640]	; (80016ec <ahrs_update+0x294>)
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fb9c 	bl	8000ba8 <__aeabi_fmul>
 8001470:	4603      	mov	r3, r0
 8001472:	667b      	str	r3, [r7, #100]	; 0x64
	gy = gyr.y * RAD;
 8001474:	4b9c      	ldr	r3, [pc, #624]	; (80016e8 <ahrs_update+0x290>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	499c      	ldr	r1, [pc, #624]	; (80016ec <ahrs_update+0x294>)
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fb94 	bl	8000ba8 <__aeabi_fmul>
 8001480:	4603      	mov	r3, r0
 8001482:	663b      	str	r3, [r7, #96]	; 0x60
	gz = gyr.z * RAD;
 8001484:	4b98      	ldr	r3, [pc, #608]	; (80016e8 <ahrs_update+0x290>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	4998      	ldr	r1, [pc, #608]	; (80016ec <ahrs_update+0x294>)
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fb8c 	bl	8000ba8 <__aeabi_fmul>
 8001490:	4603      	mov	r3, r0
 8001492:	65fb      	str	r3, [r7, #92]	; 0x5c

	acc_read_raw(&acce);
 8001494:	4896      	ldr	r0, [pc, #600]	; (80016f0 <ahrs_update+0x298>)
 8001496:	f7ff fdbb 	bl	8001010 <acc_read_raw>
	acc_Bframe[X] = (float)acce.x;
 800149a:	4b95      	ldr	r3, [pc, #596]	; (80016f0 <ahrs_update+0x298>)
 800149c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fb2d 	bl	8000b00 <__aeabi_i2f>
 80014a6:	4603      	mov	r3, r0
 80014a8:	603b      	str	r3, [r7, #0]
	acc_Bframe[Y] = (float)acce.y;
 80014aa:	4b91      	ldr	r3, [pc, #580]	; (80016f0 <ahrs_update+0x298>)
 80014ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fb25 	bl	8000b00 <__aeabi_i2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	607b      	str	r3, [r7, #4]
	acc_Bframe[Z] = (float)acce.z;
 80014ba:	4b8d      	ldr	r3, [pc, #564]	; (80016f0 <ahrs_update+0x298>)
 80014bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fb1d 	bl	8000b00 <__aeabi_i2f>
 80014c6:	4603      	mov	r3, r0
 80014c8:	60bb      	str	r3, [r7, #8]

	if(!((acce.x == 0) && (acce.y == 0) && (acce.z == 0))) {
 80014ca:	4b89      	ldr	r3, [pc, #548]	; (80016f0 <ahrs_update+0x298>)
 80014cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10a      	bne.n	80014ea <ahrs_update+0x92>
 80014d4:	4b86      	ldr	r3, [pc, #536]	; (80016f0 <ahrs_update+0x298>)
 80014d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d105      	bne.n	80014ea <ahrs_update+0x92>
 80014de:	4b84      	ldr	r3, [pc, #528]	; (80016f0 <ahrs_update+0x298>)
 80014e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 81b5 	beq.w	8001854 <ahrs_update+0x3fc>
		norm = invSqrt_(acce.x * acce.x + acce.y * acce.y + acce.z * acce.z);
 80014ea:	4b81      	ldr	r3, [pc, #516]	; (80016f0 <ahrs_update+0x298>)
 80014ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b7f      	ldr	r3, [pc, #508]	; (80016f0 <ahrs_update+0x298>)
 80014f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f8:	fb03 f202 	mul.w	r2, r3, r2
 80014fc:	4b7c      	ldr	r3, [pc, #496]	; (80016f0 <ahrs_update+0x298>)
 80014fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001502:	4619      	mov	r1, r3
 8001504:	4b7a      	ldr	r3, [pc, #488]	; (80016f0 <ahrs_update+0x298>)
 8001506:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800150a:	fb01 f303 	mul.w	r3, r1, r3
 800150e:	441a      	add	r2, r3
 8001510:	4b77      	ldr	r3, [pc, #476]	; (80016f0 <ahrs_update+0x298>)
 8001512:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001516:	4619      	mov	r1, r3
 8001518:	4b75      	ldr	r3, [pc, #468]	; (80016f0 <ahrs_update+0x298>)
 800151a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800151e:	fb01 f303 	mul.w	r3, r1, r3
 8001522:	4413      	add	r3, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff faeb 	bl	8000b00 <__aeabi_i2f>
 800152a:	4603      	mov	r3, r0
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fe1b 	bl	8002168 <invSqrt_>
 8001532:	65b8      	str	r0, [r7, #88]	; 0x58
		accex = acce.x * norm;
 8001534:	4b6e      	ldr	r3, [pc, #440]	; (80016f0 <ahrs_update+0x298>)
 8001536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fae0 	bl	8000b00 <__aeabi_i2f>
 8001540:	4603      	mov	r3, r0
 8001542:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fb2f 	bl	8000ba8 <__aeabi_fmul>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	4b69      	ldr	r3, [pc, #420]	; (80016f4 <ahrs_update+0x29c>)
 8001550:	601a      	str	r2, [r3, #0]
		accey = acce.y * norm;
 8001552:	4b67      	ldr	r3, [pc, #412]	; (80016f0 <ahrs_update+0x298>)
 8001554:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fad1 	bl	8000b00 <__aeabi_i2f>
 800155e:	4603      	mov	r3, r0
 8001560:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fb20 	bl	8000ba8 <__aeabi_fmul>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <ahrs_update+0x2a0>)
 800156e:	601a      	str	r2, [r3, #0]
		accez = acce.z * norm;
 8001570:	4b5f      	ldr	r3, [pc, #380]	; (80016f0 <ahrs_update+0x298>)
 8001572:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fac2 	bl	8000b00 <__aeabi_i2f>
 800157c:	4603      	mov	r3, r0
 800157e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fb11 	bl	8000ba8 <__aeabi_fmul>
 8001586:	4603      	mov	r3, r0
 8001588:	461a      	mov	r2, r3
 800158a:	4b5c      	ldr	r3, [pc, #368]	; (80016fc <ahrs_update+0x2a4>)
 800158c:	601a      	str	r2, [r3, #0]

		acc_pitch  =  atan2_approx(-accey,accez)*DEG;
 800158e:	4b5a      	ldr	r3, [pc, #360]	; (80016f8 <ahrs_update+0x2a0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001596:	4a59      	ldr	r2, [pc, #356]	; (80016fc <ahrs_update+0x2a4>)
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fcf9 	bl	8001f94 <atan2_approx>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4956      	ldr	r1, [pc, #344]	; (8001700 <ahrs_update+0x2a8>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fafe 	bl	8000ba8 <__aeabi_fmul>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b54      	ldr	r3, [pc, #336]	; (8001704 <ahrs_update+0x2ac>)
 80015b2:	601a      	str	r2, [r3, #0]
		acc_roll    = atan2_approx(-accex, (1/invSqrt_(accey * accey + accez * accez)))*DEG;
 80015b4:	4b4f      	ldr	r3, [pc, #316]	; (80016f4 <ahrs_update+0x29c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80015bc:	4b4e      	ldr	r3, [pc, #312]	; (80016f8 <ahrs_update+0x2a0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a4d      	ldr	r2, [pc, #308]	; (80016f8 <ahrs_update+0x2a0>)
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff faee 	bl	8000ba8 <__aeabi_fmul>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461d      	mov	r5, r3
 80015d0:	4b4a      	ldr	r3, [pc, #296]	; (80016fc <ahrs_update+0x2a4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a49      	ldr	r2, [pc, #292]	; (80016fc <ahrs_update+0x2a4>)
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fae4 	bl	8000ba8 <__aeabi_fmul>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4619      	mov	r1, r3
 80015e4:	4628      	mov	r0, r5
 80015e6:	f7ff f9d7 	bl	8000998 <__addsf3>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 fdbb 	bl	8002168 <invSqrt_>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4619      	mov	r1, r3
 80015f6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80015fa:	f7ff fb89 	bl	8000d10 <__aeabi_fdiv>
 80015fe:	4603      	mov	r3, r0
 8001600:	4619      	mov	r1, r3
 8001602:	4620      	mov	r0, r4
 8001604:	f000 fcc6 	bl	8001f94 <atan2_approx>
 8001608:	4603      	mov	r3, r0
 800160a:	493d      	ldr	r1, [pc, #244]	; (8001700 <ahrs_update+0x2a8>)
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff facb 	bl	8000ba8 <__aeabi_fmul>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	4b3c      	ldr	r3, [pc, #240]	; (8001708 <ahrs_update+0x2b0>)
 8001618:	601a      	str	r2, [r3, #0]
			emx = my * wz - mz * wy;
			emy = mz * wx - mx * wz;
			emz = mx * wy - my * wx;
		}
		else{
			emx = 0.0f;
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	657b      	str	r3, [r7, #84]	; 0x54
			emy = 0.0f;
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	653b      	str	r3, [r7, #80]	; 0x50
			emz = 0.0f;
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		vx = dcm[0][2];
 800162c:	4b37      	ldr	r3, [pc, #220]	; (800170c <ahrs_update+0x2b4>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	64bb      	str	r3, [r7, #72]	; 0x48
		vy = dcm[1][2];
 8001632:	4b36      	ldr	r3, [pc, #216]	; (800170c <ahrs_update+0x2b4>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	647b      	str	r3, [r7, #68]	; 0x44
		vz = dcm[2][2];
 8001638:	4b34      	ldr	r3, [pc, #208]	; (800170c <ahrs_update+0x2b4>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	643b      	str	r3, [r7, #64]	; 0x40

		ex = (accey * vz - accez * vy) + emx;
 800163e:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <ahrs_update+0x2a0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff faaf 	bl	8000ba8 <__aeabi_fmul>
 800164a:	4603      	mov	r3, r0
 800164c:	461c      	mov	r4, r3
 800164e:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <ahrs_update+0x2a4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff faa7 	bl	8000ba8 <__aeabi_fmul>
 800165a:	4603      	mov	r3, r0
 800165c:	4619      	mov	r1, r3
 800165e:	4620      	mov	r0, r4
 8001660:	f7ff f998 	bl	8000994 <__aeabi_fsub>
 8001664:	4603      	mov	r3, r0
 8001666:	4619      	mov	r1, r3
 8001668:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800166a:	f7ff f995 	bl	8000998 <__addsf3>
 800166e:	4603      	mov	r3, r0
 8001670:	63fb      	str	r3, [r7, #60]	; 0x3c
		ey = (accez * vx - accex * vz) + emy;
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <ahrs_update+0x2a4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fa95 	bl	8000ba8 <__aeabi_fmul>
 800167e:	4603      	mov	r3, r0
 8001680:	461c      	mov	r4, r3
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <ahrs_update+0x29c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fa8d 	bl	8000ba8 <__aeabi_fmul>
 800168e:	4603      	mov	r3, r0
 8001690:	4619      	mov	r1, r3
 8001692:	4620      	mov	r0, r4
 8001694:	f7ff f97e 	bl	8000994 <__aeabi_fsub>
 8001698:	4603      	mov	r3, r0
 800169a:	4619      	mov	r1, r3
 800169c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800169e:	f7ff f97b 	bl	8000998 <__addsf3>
 80016a2:	4603      	mov	r3, r0
 80016a4:	63bb      	str	r3, [r7, #56]	; 0x38
		ez = (accex * vy - accey * vx) + emz;
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <ahrs_update+0x29c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fa7b 	bl	8000ba8 <__aeabi_fmul>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461c      	mov	r4, r3
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <ahrs_update+0x2a0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fa73 	bl	8000ba8 <__aeabi_fmul>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4619      	mov	r1, r3
 80016c6:	4620      	mov	r0, r4
 80016c8:	f7ff f964 	bl	8000994 <__aeabi_fsub>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4619      	mov	r1, r3
 80016d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80016d2:	f7ff f961 	bl	8000998 <__addsf3>
 80016d6:	4603      	mov	r3, r0
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34

		if(Ki > 0.0f) {
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	f04f 0100 	mov.w	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	e014      	b.n	8001710 <ahrs_update+0x2b8>
 80016e6:	bf00      	nop
 80016e8:	20000174 	.word	0x20000174
 80016ec:	3c8efa35 	.word	0x3c8efa35
 80016f0:	2000016c 	.word	0x2000016c
 80016f4:	20000130 	.word	0x20000130
 80016f8:	20000134 	.word	0x20000134
 80016fc:	20000138 	.word	0x20000138
 8001700:	42652ee0 	.word	0x42652ee0
 8001704:	20000180 	.word	0x20000180
 8001708:	20000184 	.word	0x20000184
 800170c:	20000148 	.word	0x20000148
 8001710:	f7ff fc06 	bl	8000f20 <__aeabi_fcmpgt>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d06c      	beq.n	80017f4 <ahrs_update+0x39c>
			integralFBx += Ki * ex * Dt_ahrs;
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fa41 	bl	8000ba8 <__aeabi_fmul>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <ahrs_update+0x38c>)
 800172c:	4619      	mov	r1, r3
 800172e:	4610      	mov	r0, r2
 8001730:	f7ff fa3a 	bl	8000ba8 <__aeabi_fmul>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	4b2b      	ldr	r3, [pc, #172]	; (80017e8 <ahrs_update+0x390>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	4610      	mov	r0, r2
 8001740:	f7ff f92a 	bl	8000998 <__addsf3>
 8001744:	4603      	mov	r3, r0
 8001746:	461a      	mov	r2, r3
 8001748:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <ahrs_update+0x390>)
 800174a:	601a      	str	r2, [r3, #0]
			integralFBy += Ki * ey * Dt_ahrs;
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fa28 	bl	8000ba8 <__aeabi_fmul>
 8001758:	4603      	mov	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <ahrs_update+0x38c>)
 800175e:	4619      	mov	r1, r3
 8001760:	4610      	mov	r0, r2
 8001762:	f7ff fa21 	bl	8000ba8 <__aeabi_fmul>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <ahrs_update+0x394>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	4610      	mov	r0, r2
 8001772:	f7ff f911 	bl	8000998 <__addsf3>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <ahrs_update+0x394>)
 800177c:	601a      	str	r2, [r3, #0]
			integralFBz += Ki * ez * Dt_ahrs;
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fa0f 	bl	8000ba8 <__aeabi_fmul>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <ahrs_update+0x38c>)
 8001790:	4619      	mov	r1, r3
 8001792:	4610      	mov	r0, r2
 8001794:	f7ff fa08 	bl	8000ba8 <__aeabi_fmul>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <ahrs_update+0x398>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	4610      	mov	r0, r2
 80017a4:	f7ff f8f8 	bl	8000998 <__addsf3>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <ahrs_update+0x398>)
 80017ae:	601a      	str	r2, [r3, #0]
			gx += integralFBx;
 80017b0:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <ahrs_update+0x390>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80017b8:	f7ff f8ee 	bl	8000998 <__addsf3>
 80017bc:	4603      	mov	r3, r0
 80017be:	667b      	str	r3, [r7, #100]	; 0x64
			gy += integralFBy;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <ahrs_update+0x394>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80017c8:	f7ff f8e6 	bl	8000998 <__addsf3>
 80017cc:	4603      	mov	r3, r0
 80017ce:	663b      	str	r3, [r7, #96]	; 0x60
			gz += integralFBz;
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <ahrs_update+0x398>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80017d8:	f7ff f8de 	bl	8000998 <__addsf3>
 80017dc:	4603      	mov	r3, r0
 80017de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017e0:	e014      	b.n	800180c <ahrs_update+0x3b4>
 80017e2:	bf00      	nop
 80017e4:	3b03126f 	.word	0x3b03126f
 80017e8:	20000118 	.word	0x20000118
 80017ec:	2000011c 	.word	0x2000011c
 80017f0:	20000120 	.word	0x20000120
		} else {
			integralFBx = 0.0f;
 80017f4:	4b96      	ldr	r3, [pc, #600]	; (8001a50 <ahrs_update+0x5f8>)
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 80017fc:	4b95      	ldr	r3, [pc, #596]	; (8001a54 <ahrs_update+0x5fc>)
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8001804:	4b94      	ldr	r3, [pc, #592]	; (8001a58 <ahrs_update+0x600>)
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
		}

		gx += Kp * ex;
 800180c:	4b93      	ldr	r3, [pc, #588]	; (8001a5c <ahrs_update+0x604>)
 800180e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff f9c9 	bl	8000ba8 <__aeabi_fmul>
 8001816:	4603      	mov	r3, r0
 8001818:	4619      	mov	r1, r3
 800181a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800181c:	f7ff f8bc 	bl	8000998 <__addsf3>
 8001820:	4603      	mov	r3, r0
 8001822:	667b      	str	r3, [r7, #100]	; 0x64
		gy += Kp * ey;
 8001824:	4b8d      	ldr	r3, [pc, #564]	; (8001a5c <ahrs_update+0x604>)
 8001826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff f9bd 	bl	8000ba8 <__aeabi_fmul>
 800182e:	4603      	mov	r3, r0
 8001830:	4619      	mov	r1, r3
 8001832:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001834:	f7ff f8b0 	bl	8000998 <__addsf3>
 8001838:	4603      	mov	r3, r0
 800183a:	663b      	str	r3, [r7, #96]	; 0x60
		gz += Kp * ez;
 800183c:	4b87      	ldr	r3, [pc, #540]	; (8001a5c <ahrs_update+0x604>)
 800183e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff f9b1 	bl	8000ba8 <__aeabi_fmul>
 8001846:	4603      	mov	r3, r0
 8001848:	4619      	mov	r1, r3
 800184a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800184c:	f7ff f8a4 	bl	8000998 <__addsf3>
 8001850:	4603      	mov	r3, r0
 8001852:	65fb      	str	r3, [r7, #92]	; 0x5c
	}

	gx *= (0.5f * Dt_ahrs);
 8001854:	4b82      	ldr	r3, [pc, #520]	; (8001a60 <ahrs_update+0x608>)
 8001856:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff f9a4 	bl	8000ba8 <__aeabi_fmul>
 8001860:	4603      	mov	r3, r0
 8001862:	4619      	mov	r1, r3
 8001864:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001866:	f7ff f99f 	bl	8000ba8 <__aeabi_fmul>
 800186a:	4603      	mov	r3, r0
 800186c:	667b      	str	r3, [r7, #100]	; 0x64
	gy *= (0.5f * Dt_ahrs);
 800186e:	4b7c      	ldr	r3, [pc, #496]	; (8001a60 <ahrs_update+0x608>)
 8001870:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff f997 	bl	8000ba8 <__aeabi_fmul>
 800187a:	4603      	mov	r3, r0
 800187c:	4619      	mov	r1, r3
 800187e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001880:	f7ff f992 	bl	8000ba8 <__aeabi_fmul>
 8001884:	4603      	mov	r3, r0
 8001886:	663b      	str	r3, [r7, #96]	; 0x60
	gz *= (0.5f * Dt_ahrs);
 8001888:	4b75      	ldr	r3, [pc, #468]	; (8001a60 <ahrs_update+0x608>)
 800188a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff f98a 	bl	8000ba8 <__aeabi_fmul>
 8001894:	4603      	mov	r3, r0
 8001896:	4619      	mov	r1, r3
 8001898:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800189a:	f7ff f985 	bl	8000ba8 <__aeabi_fmul>
 800189e:	4603      	mov	r3, r0
 80018a0:	65fb      	str	r3, [r7, #92]	; 0x5c

	q0 += (-q1 * gx - q2 * gy - q3 * gz);
 80018a2:	4b70      	ldr	r3, [pc, #448]	; (8001a64 <ahrs_update+0x60c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80018aa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff f97b 	bl	8000ba8 <__aeabi_fmul>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461c      	mov	r4, r3
 80018b6:	4b6c      	ldr	r3, [pc, #432]	; (8001a68 <ahrs_update+0x610>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff f973 	bl	8000ba8 <__aeabi_fmul>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4619      	mov	r1, r3
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff f864 	bl	8000994 <__aeabi_fsub>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461c      	mov	r4, r3
 80018d0:	4b66      	ldr	r3, [pc, #408]	; (8001a6c <ahrs_update+0x614>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f966 	bl	8000ba8 <__aeabi_fmul>
 80018dc:	4603      	mov	r3, r0
 80018de:	4619      	mov	r1, r3
 80018e0:	4620      	mov	r0, r4
 80018e2:	f7ff f857 	bl	8000994 <__aeabi_fsub>
 80018e6:	4603      	mov	r3, r0
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b61      	ldr	r3, [pc, #388]	; (8001a70 <ahrs_update+0x618>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f7ff f851 	bl	8000998 <__addsf3>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b5d      	ldr	r3, [pc, #372]	; (8001a70 <ahrs_update+0x618>)
 80018fc:	601a      	str	r2, [r3, #0]
	q1 += ( q0 * gx + q2 * gz - q3 * gy);
 80018fe:	4b5c      	ldr	r3, [pc, #368]	; (8001a70 <ahrs_update+0x618>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff f94f 	bl	8000ba8 <__aeabi_fmul>
 800190a:	4603      	mov	r3, r0
 800190c:	461c      	mov	r4, r3
 800190e:	4b56      	ldr	r3, [pc, #344]	; (8001a68 <ahrs_update+0x610>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff f947 	bl	8000ba8 <__aeabi_fmul>
 800191a:	4603      	mov	r3, r0
 800191c:	4619      	mov	r1, r3
 800191e:	4620      	mov	r0, r4
 8001920:	f7ff f83a 	bl	8000998 <__addsf3>
 8001924:	4603      	mov	r3, r0
 8001926:	461c      	mov	r4, r3
 8001928:	4b50      	ldr	r3, [pc, #320]	; (8001a6c <ahrs_update+0x614>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f93a 	bl	8000ba8 <__aeabi_fmul>
 8001934:	4603      	mov	r3, r0
 8001936:	4619      	mov	r1, r3
 8001938:	4620      	mov	r0, r4
 800193a:	f7ff f82b 	bl	8000994 <__aeabi_fsub>
 800193e:	4603      	mov	r3, r0
 8001940:	461a      	mov	r2, r3
 8001942:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <ahrs_update+0x60c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4619      	mov	r1, r3
 8001948:	4610      	mov	r0, r2
 800194a:	f7ff f825 	bl	8000998 <__addsf3>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <ahrs_update+0x60c>)
 8001954:	601a      	str	r2, [r3, #0]
	q2 += ( q0 * gy - q1 * gz + q3 * gx);
 8001956:	4b46      	ldr	r3, [pc, #280]	; (8001a70 <ahrs_update+0x618>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff f923 	bl	8000ba8 <__aeabi_fmul>
 8001962:	4603      	mov	r3, r0
 8001964:	461c      	mov	r4, r3
 8001966:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <ahrs_update+0x60c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff f91b 	bl	8000ba8 <__aeabi_fmul>
 8001972:	4603      	mov	r3, r0
 8001974:	4619      	mov	r1, r3
 8001976:	4620      	mov	r0, r4
 8001978:	f7ff f80c 	bl	8000994 <__aeabi_fsub>
 800197c:	4603      	mov	r3, r0
 800197e:	461c      	mov	r4, r3
 8001980:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <ahrs_update+0x614>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f90e 	bl	8000ba8 <__aeabi_fmul>
 800198c:	4603      	mov	r3, r0
 800198e:	4619      	mov	r1, r3
 8001990:	4620      	mov	r0, r4
 8001992:	f7ff f801 	bl	8000998 <__addsf3>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <ahrs_update+0x610>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4619      	mov	r1, r3
 80019a0:	4610      	mov	r0, r2
 80019a2:	f7fe fff9 	bl	8000998 <__addsf3>
 80019a6:	4603      	mov	r3, r0
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <ahrs_update+0x610>)
 80019ac:	601a      	str	r2, [r3, #0]
	q3 += ( q0 * gz + q1 * gy - q2 * gx);
 80019ae:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <ahrs_update+0x618>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f8f7 	bl	8000ba8 <__aeabi_fmul>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461c      	mov	r4, r3
 80019be:	4b29      	ldr	r3, [pc, #164]	; (8001a64 <ahrs_update+0x60c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff f8ef 	bl	8000ba8 <__aeabi_fmul>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4619      	mov	r1, r3
 80019ce:	4620      	mov	r0, r4
 80019d0:	f7fe ffe2 	bl	8000998 <__addsf3>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461c      	mov	r4, r3
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <ahrs_update+0x610>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f8e2 	bl	8000ba8 <__aeabi_fmul>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4619      	mov	r1, r3
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7fe ffd3 	bl	8000994 <__aeabi_fsub>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <ahrs_update+0x614>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4619      	mov	r1, r3
 80019f8:	4610      	mov	r0, r2
 80019fa:	f7fe ffcd 	bl	8000998 <__addsf3>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <ahrs_update+0x614>)
 8001a04:	601a      	str	r2, [r3, #0]

	norm = invSqrt_(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <ahrs_update+0x618>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a19      	ldr	r2, [pc, #100]	; (8001a70 <ahrs_update+0x618>)
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f8c9 	bl	8000ba8 <__aeabi_fmul>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461c      	mov	r4, r3
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <ahrs_update+0x60c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <ahrs_update+0x60c>)
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff f8bf 	bl	8000ba8 <__aeabi_fmul>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f7fe ffb2 	bl	8000998 <__addsf3>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461c      	mov	r4, r3
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <ahrs_update+0x610>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <ahrs_update+0x610>)
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f8b0 	bl	8000ba8 <__aeabi_fmul>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	e012      	b.n	8001a74 <ahrs_update+0x61c>
 8001a4e:	bf00      	nop
 8001a50:	20000118 	.word	0x20000118
 8001a54:	2000011c 	.word	0x2000011c
 8001a58:	20000120 	.word	0x20000120
 8001a5c:	41a00000 	.word	0x41a00000
 8001a60:	3b03126f 	.word	0x3b03126f
 8001a64:	2000013c 	.word	0x2000013c
 8001a68:	20000140 	.word	0x20000140
 8001a6c:	20000144 	.word	0x20000144
 8001a70:	20000000 	.word	0x20000000
 8001a74:	4620      	mov	r0, r4
 8001a76:	f7fe ff8f 	bl	8000998 <__addsf3>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461c      	mov	r4, r3
 8001a7e:	4b93      	ldr	r3, [pc, #588]	; (8001ccc <ahrs_update+0x874>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a92      	ldr	r2, [pc, #584]	; (8001ccc <ahrs_update+0x874>)
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff f88d 	bl	8000ba8 <__aeabi_fmul>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4619      	mov	r1, r3
 8001a92:	4620      	mov	r0, r4
 8001a94:	f7fe ff80 	bl	8000998 <__addsf3>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 fb64 	bl	8002168 <invSqrt_>
 8001aa0:	65b8      	str	r0, [r7, #88]	; 0x58
	q0 *= norm;
 8001aa2:	4b8b      	ldr	r3, [pc, #556]	; (8001cd0 <ahrs_update+0x878>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff f87d 	bl	8000ba8 <__aeabi_fmul>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b87      	ldr	r3, [pc, #540]	; (8001cd0 <ahrs_update+0x878>)
 8001ab4:	601a      	str	r2, [r3, #0]
	q1 *= norm;
 8001ab6:	4b87      	ldr	r3, [pc, #540]	; (8001cd4 <ahrs_update+0x87c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff f873 	bl	8000ba8 <__aeabi_fmul>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <ahrs_update+0x87c>)
 8001ac8:	601a      	str	r2, [r3, #0]
	q2 *= norm;
 8001aca:	4b83      	ldr	r3, [pc, #524]	; (8001cd8 <ahrs_update+0x880>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff f869 	bl	8000ba8 <__aeabi_fmul>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b7f      	ldr	r3, [pc, #508]	; (8001cd8 <ahrs_update+0x880>)
 8001adc:	601a      	str	r2, [r3, #0]
	q3 *= norm;
 8001ade:	4b7b      	ldr	r3, [pc, #492]	; (8001ccc <ahrs_update+0x874>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff f85f 	bl	8000ba8 <__aeabi_fmul>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b77      	ldr	r3, [pc, #476]	; (8001ccc <ahrs_update+0x874>)
 8001af0:	601a      	str	r2, [r3, #0]

	float q0q1 = q0*q1;
 8001af2:	4b77      	ldr	r3, [pc, #476]	; (8001cd0 <ahrs_update+0x878>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a77      	ldr	r2, [pc, #476]	; (8001cd4 <ahrs_update+0x87c>)
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff f853 	bl	8000ba8 <__aeabi_fmul>
 8001b02:	4603      	mov	r3, r0
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
	float q0q2 = q0*q2;
 8001b06:	4b72      	ldr	r3, [pc, #456]	; (8001cd0 <ahrs_update+0x878>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a73      	ldr	r2, [pc, #460]	; (8001cd8 <ahrs_update+0x880>)
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff f849 	bl	8000ba8 <__aeabi_fmul>
 8001b16:	4603      	mov	r3, r0
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
	float q0q3 = q0*q3;
 8001b1a:	4b6d      	ldr	r3, [pc, #436]	; (8001cd0 <ahrs_update+0x878>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a6b      	ldr	r2, [pc, #428]	; (8001ccc <ahrs_update+0x874>)
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff f83f 	bl	8000ba8 <__aeabi_fmul>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
	float q1q1 = q1*q1;
 8001b2e:	4b69      	ldr	r3, [pc, #420]	; (8001cd4 <ahrs_update+0x87c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a68      	ldr	r2, [pc, #416]	; (8001cd4 <ahrs_update+0x87c>)
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff f835 	bl	8000ba8 <__aeabi_fmul>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
	float q1q2 = q1*q2;
 8001b42:	4b64      	ldr	r3, [pc, #400]	; (8001cd4 <ahrs_update+0x87c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a64      	ldr	r2, [pc, #400]	; (8001cd8 <ahrs_update+0x880>)
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff f82b 	bl	8000ba8 <__aeabi_fmul>
 8001b52:	4603      	mov	r3, r0
 8001b54:	623b      	str	r3, [r7, #32]
	float q1q3 = q1*q3;
 8001b56:	4b5f      	ldr	r3, [pc, #380]	; (8001cd4 <ahrs_update+0x87c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a5c      	ldr	r2, [pc, #368]	; (8001ccc <ahrs_update+0x874>)
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff f821 	bl	8000ba8 <__aeabi_fmul>
 8001b66:	4603      	mov	r3, r0
 8001b68:	61fb      	str	r3, [r7, #28]
	float q2q2 = q2*q2;
 8001b6a:	4b5b      	ldr	r3, [pc, #364]	; (8001cd8 <ahrs_update+0x880>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a5a      	ldr	r2, [pc, #360]	; (8001cd8 <ahrs_update+0x880>)
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff f817 	bl	8000ba8 <__aeabi_fmul>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	61bb      	str	r3, [r7, #24]
	float q2q3 = q2*q3;
 8001b7e:	4b56      	ldr	r3, [pc, #344]	; (8001cd8 <ahrs_update+0x880>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <ahrs_update+0x874>)
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff f80d 	bl	8000ba8 <__aeabi_fmul>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	617b      	str	r3, [r7, #20]
	float q3q3 = q3*q3;
 8001b92:	4b4e      	ldr	r3, [pc, #312]	; (8001ccc <ahrs_update+0x874>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a4d      	ldr	r2, [pc, #308]	; (8001ccc <ahrs_update+0x874>)
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff f803 	bl	8000ba8 <__aeabi_fmul>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	613b      	str	r3, [r7, #16]
    // Quaternion to Rotation matrix
    dcm[0][0] = 2.0f*(0.5f - q2q2  - q3q3);
 8001ba6:	69b9      	ldr	r1, [r7, #24]
 8001ba8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001bac:	f7fe fef2 	bl	8000994 <__aeabi_fsub>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	6939      	ldr	r1, [r7, #16]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe feed 	bl	8000994 <__aeabi_fsub>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe feea 	bl	8000998 <__addsf3>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <ahrs_update+0x884>)
 8001bca:	601a      	str	r2, [r3, #0]
    dcm[1][0] = 2.0f*(q1q2 - q0q3);
 8001bcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bce:	6a38      	ldr	r0, [r7, #32]
 8001bd0:	f7fe fee0 	bl	8000994 <__aeabi_fsub>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fedd 	bl	8000998 <__addsf3>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b3e      	ldr	r3, [pc, #248]	; (8001cdc <ahrs_update+0x884>)
 8001be4:	60da      	str	r2, [r3, #12]
    dcm[2][0] = 2.0f*(q1q3 + q0q2);
 8001be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001be8:	69f8      	ldr	r0, [r7, #28]
 8001bea:	f7fe fed5 	bl	8000998 <__addsf3>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fed0 	bl	8000998 <__addsf3>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b37      	ldr	r3, [pc, #220]	; (8001cdc <ahrs_update+0x884>)
 8001bfe:	619a      	str	r2, [r3, #24]
    dcm[0][1] = 2.0f*(q1q2 + q0q3);
 8001c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c02:	6a38      	ldr	r0, [r7, #32]
 8001c04:	f7fe fec8 	bl	8000998 <__addsf3>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fec3 	bl	8000998 <__addsf3>
 8001c12:	4603      	mov	r3, r0
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <ahrs_update+0x884>)
 8001c18:	605a      	str	r2, [r3, #4]
    dcm[1][1] = 2.0f*(0.5f - q1q1 - q3q3);
 8001c1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c1c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001c20:	f7fe feb8 	bl	8000994 <__aeabi_fsub>
 8001c24:	4603      	mov	r3, r0
 8001c26:	6939      	ldr	r1, [r7, #16]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe feb3 	bl	8000994 <__aeabi_fsub>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4619      	mov	r1, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe feb0 	bl	8000998 <__addsf3>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <ahrs_update+0x884>)
 8001c3e:	611a      	str	r2, [r3, #16]
    dcm[2][1] = 2.0f*(q2q3 - q0q1);
 8001c40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c42:	6978      	ldr	r0, [r7, #20]
 8001c44:	f7fe fea6 	bl	8000994 <__aeabi_fsub>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fea3 	bl	8000998 <__addsf3>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <ahrs_update+0x884>)
 8001c58:	61da      	str	r2, [r3, #28]
    dcm[0][2] = 2.0f*(q1q3 - q0q2);
 8001c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c5c:	69f8      	ldr	r0, [r7, #28]
 8001c5e:	f7fe fe99 	bl	8000994 <__aeabi_fsub>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4619      	mov	r1, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fe96 	bl	8000998 <__addsf3>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <ahrs_update+0x884>)
 8001c72:	609a      	str	r2, [r3, #8]
    dcm[1][2] = 2.0f*(q2q3 + q0q1);
 8001c74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c76:	6978      	ldr	r0, [r7, #20]
 8001c78:	f7fe fe8e 	bl	8000998 <__addsf3>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fe89 	bl	8000998 <__addsf3>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <ahrs_update+0x884>)
 8001c8c:	615a      	str	r2, [r3, #20]
    dcm[2][2] = 2.0f*(0.5f - q1q1 - q2q2);
 8001c8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c90:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001c94:	f7fe fe7e 	bl	8000994 <__aeabi_fsub>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	69b9      	ldr	r1, [r7, #24]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fe79 	bl	8000994 <__aeabi_fsub>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fe76 	bl	8000998 <__addsf3>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <ahrs_update+0x884>)
 8001cb2:	621a      	str	r2, [r3, #32]
    // Rotate acceleration from Body frame to earth frame
	acc_Eframe[X] = dcm[0][0]*acc_Bframe[X] + dcm[1][0]*acc_Bframe[Y] + dcm[2][0]*acc_Bframe[Z];
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <ahrs_update+0x884>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe ff73 	bl	8000ba8 <__aeabi_fmul>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461c      	mov	r4, r3
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <ahrs_update+0x884>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	e009      	b.n	8001ce0 <ahrs_update+0x888>
 8001ccc:	20000144 	.word	0x20000144
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	2000013c 	.word	0x2000013c
 8001cd8:	20000140 	.word	0x20000140
 8001cdc:	20000148 	.word	0x20000148
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe ff5f 	bl	8000ba8 <__aeabi_fmul>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4619      	mov	r1, r3
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f7fe fe52 	bl	8000998 <__addsf3>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461c      	mov	r4, r3
 8001cf8:	4b9d      	ldr	r3, [pc, #628]	; (8001f70 <ahrs_update+0xb18>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe ff51 	bl	8000ba8 <__aeabi_fmul>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f7fe fe44 	bl	8000998 <__addsf3>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b97      	ldr	r3, [pc, #604]	; (8001f74 <ahrs_update+0xb1c>)
 8001d16:	601a      	str	r2, [r3, #0]
	acc_Eframe[Y] = dcm[0][1]*acc_Bframe[X] + dcm[1][1]*acc_Bframe[Y] + dcm[2][1]*acc_Bframe[Z];
 8001d18:	4b95      	ldr	r3, [pc, #596]	; (8001f70 <ahrs_update+0xb18>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe ff41 	bl	8000ba8 <__aeabi_fmul>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461c      	mov	r4, r3
 8001d2a:	4b91      	ldr	r3, [pc, #580]	; (8001f70 <ahrs_update+0xb18>)
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe ff38 	bl	8000ba8 <__aeabi_fmul>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f7fe fe2b 	bl	8000998 <__addsf3>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461c      	mov	r4, r3
 8001d46:	4b8a      	ldr	r3, [pc, #552]	; (8001f70 <ahrs_update+0xb18>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe ff2a 	bl	8000ba8 <__aeabi_fmul>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4619      	mov	r1, r3
 8001d58:	4620      	mov	r0, r4
 8001d5a:	f7fe fe1d 	bl	8000998 <__addsf3>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b84      	ldr	r3, [pc, #528]	; (8001f74 <ahrs_update+0xb1c>)
 8001d64:	605a      	str	r2, [r3, #4]
	acc_Eframe[Z] = dcm[0][2]*acc_Bframe[X] + dcm[1][2]*acc_Bframe[Y] + dcm[2][2]*acc_Bframe[Z];
 8001d66:	4b82      	ldr	r3, [pc, #520]	; (8001f70 <ahrs_update+0xb18>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe ff1a 	bl	8000ba8 <__aeabi_fmul>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461c      	mov	r4, r3
 8001d78:	4b7d      	ldr	r3, [pc, #500]	; (8001f70 <ahrs_update+0xb18>)
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe ff11 	bl	8000ba8 <__aeabi_fmul>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f7fe fe04 	bl	8000998 <__addsf3>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461c      	mov	r4, r3
 8001d94:	4b76      	ldr	r3, [pc, #472]	; (8001f70 <ahrs_update+0xb18>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe ff03 	bl	8000ba8 <__aeabi_fmul>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4619      	mov	r1, r3
 8001da6:	4620      	mov	r0, r4
 8001da8:	f7fe fdf6 	bl	8000998 <__addsf3>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b70      	ldr	r3, [pc, #448]	; (8001f74 <ahrs_update+0xb1c>)
 8001db2:	609a      	str	r2, [r3, #8]
	float accTrueScale = 9.8f/2048.0f;
 8001db4:	4b70      	ldr	r3, [pc, #448]	; (8001f78 <ahrs_update+0xb20>)
 8001db6:	60fb      	str	r3, [r7, #12]
	acc_Eframe[X] = acc_Eframe[X]*accTrueScale;
 8001db8:	4b6e      	ldr	r3, [pc, #440]	; (8001f74 <ahrs_update+0xb1c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68f9      	ldr	r1, [r7, #12]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fef2 	bl	8000ba8 <__aeabi_fmul>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <ahrs_update+0xb1c>)
 8001dca:	601a      	str	r2, [r3, #0]
	acc_Eframe[Y] = acc_Eframe[Y]*accTrueScale;
 8001dcc:	4b69      	ldr	r3, [pc, #420]	; (8001f74 <ahrs_update+0xb1c>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	68f9      	ldr	r1, [r7, #12]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fee8 	bl	8000ba8 <__aeabi_fmul>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b65      	ldr	r3, [pc, #404]	; (8001f74 <ahrs_update+0xb1c>)
 8001dde:	605a      	str	r2, [r3, #4]
	acc_Eframe[Z] = acc_Eframe[Z]*accTrueScale;
 8001de0:	4b64      	ldr	r3, [pc, #400]	; (8001f74 <ahrs_update+0xb1c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	68f9      	ldr	r1, [r7, #12]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fede 	bl	8000ba8 <__aeabi_fmul>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	4b60      	ldr	r3, [pc, #384]	; (8001f74 <ahrs_update+0xb1c>)
 8001df2:	609a      	str	r2, [r3, #8]
    // Quaternion to euler angle    // deg
	AHRS.roll  = atan2_approx(-dcm[0][2],sqrtf(1 - dcm[0][2]*dcm[0][2])) * DEG;
 8001df4:	4b5e      	ldr	r3, [pc, #376]	; (8001f70 <ahrs_update+0xb18>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001dfc:	4b5c      	ldr	r3, [pc, #368]	; (8001f70 <ahrs_update+0xb18>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4a5b      	ldr	r2, [pc, #364]	; (8001f70 <ahrs_update+0xb18>)
 8001e02:	6892      	ldr	r2, [r2, #8]
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fece 	bl	8000ba8 <__aeabi_fmul>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001e14:	f7fe fdbe 	bl	8000994 <__aeabi_fsub>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f004 fc4e 	bl	80066bc <sqrtf>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4619      	mov	r1, r3
 8001e24:	4620      	mov	r0, r4
 8001e26:	f000 f8b5 	bl	8001f94 <atan2_approx>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4953      	ldr	r1, [pc, #332]	; (8001f7c <ahrs_update+0xb24>)
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe feba 	bl	8000ba8 <__aeabi_fmul>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b51      	ldr	r3, [pc, #324]	; (8001f80 <ahrs_update+0xb28>)
 8001e3a:	601a      	str	r2, [r3, #0]
	AHRS.pitch = atan2_approx(-dcm[1][2],dcm[2][2]) * DEG;
 8001e3c:	4b4c      	ldr	r3, [pc, #304]	; (8001f70 <ahrs_update+0xb18>)
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e44:	4a4a      	ldr	r2, [pc, #296]	; (8001f70 <ahrs_update+0xb18>)
 8001e46:	6a12      	ldr	r2, [r2, #32]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f8a2 	bl	8001f94 <atan2_approx>
 8001e50:	4603      	mov	r3, r0
 8001e52:	494a      	ldr	r1, [pc, #296]	; (8001f7c <ahrs_update+0xb24>)
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fea7 	bl	8000ba8 <__aeabi_fmul>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b48      	ldr	r3, [pc, #288]	; (8001f80 <ahrs_update+0xb28>)
 8001e60:	605a      	str	r2, [r3, #4]
	AHRS.yaw   = atan2_approx(dcm[0][1],dcm[0][0]) * DEG;
 8001e62:	4b43      	ldr	r3, [pc, #268]	; (8001f70 <ahrs_update+0xb18>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4a42      	ldr	r2, [pc, #264]	; (8001f70 <ahrs_update+0xb18>)
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 f891 	bl	8001f94 <atan2_approx>
 8001e72:	4603      	mov	r3, r0
 8001e74:	4941      	ldr	r1, [pc, #260]	; (8001f7c <ahrs_update+0xb24>)
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fe96 	bl	8000ba8 <__aeabi_fmul>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <ahrs_update+0xb28>)
 8001e82:	609a      	str	r2, [r3, #8]
	AHRS.acc_x = acc_Eframe[X];//fapplyDeadband(acc_Eframe[X],0.05);  // dead band 0.05 m/ss
 8001e84:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <ahrs_update+0xb1c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a3d      	ldr	r2, [pc, #244]	; (8001f80 <ahrs_update+0xb28>)
 8001e8a:	6193      	str	r3, [r2, #24]
	static float a = 0,p_a;
    AHRS.acc_y = fapplyDeadband(acc_Eframe[Y],0.05);
 8001e8c:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <ahrs_update+0xb1c>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	493c      	ldr	r1, [pc, #240]	; (8001f84 <ahrs_update+0xb2c>)
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f93e 	bl	8002114 <fapplyDeadband>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4a39      	ldr	r2, [pc, #228]	; (8001f80 <ahrs_update+0xb28>)
 8001e9c:	61d3      	str	r3, [r2, #28]
    a = 0.8*a + 0.2*AHRS.acc_y;
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <ahrs_update+0xb30>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fab8 	bl	8000418 <__aeabi_f2d>
 8001ea8:	a32b      	add	r3, pc, #172	; (adr r3, 8001f58 <ahrs_update+0xb00>)
 8001eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eae:	f7fe fb0b 	bl	80004c8 <__aeabi_dmul>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4614      	mov	r4, r2
 8001eb8:	461d      	mov	r5, r3
 8001eba:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <ahrs_update+0xb28>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe faaa 	bl	8000418 <__aeabi_f2d>
 8001ec4:	a326      	add	r3, pc, #152	; (adr r3, 8001f60 <ahrs_update+0xb08>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	f7fe fafd 	bl	80004c8 <__aeabi_dmul>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	4629      	mov	r1, r5
 8001ed6:	f7fe f941 	bl	800015c <__adddf3>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f7fe fd03 	bl	80008ec <__aeabi_d2f>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4a27      	ldr	r2, [pc, #156]	; (8001f88 <ahrs_update+0xb30>)
 8001eea:	6013      	str	r3, [r2, #0]
    p_a +=a*0.04;
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <ahrs_update+0xb34>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fa91 	bl	8000418 <__aeabi_f2d>
 8001ef6:	4604      	mov	r4, r0
 8001ef8:	460d      	mov	r5, r1
 8001efa:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <ahrs_update+0xb30>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fa8a 	bl	8000418 <__aeabi_f2d>
 8001f04:	a318      	add	r3, pc, #96	; (adr r3, 8001f68 <ahrs_update+0xb10>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe fadd 	bl	80004c8 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4620      	mov	r0, r4
 8001f14:	4629      	mov	r1, r5
 8001f16:	f7fe f921 	bl	800015c <__adddf3>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4619      	mov	r1, r3
 8001f22:	f7fe fce3 	bl	80008ec <__aeabi_d2f>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <ahrs_update+0xb34>)
 8001f2a:	6013      	str	r3, [r2, #0]
    AHRS.acc_z = p_a;//acc_Eframe[Z];//fapplyDeadband(acc_Eframe[Z],0.05);
 8001f2c:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <ahrs_update+0xb34>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a13      	ldr	r2, [pc, #76]	; (8001f80 <ahrs_update+0xb28>)
 8001f32:	6213      	str	r3, [r2, #32]
    //p_a = a;
	AHRS.roll_rate  = gyr.x;    // deg/s
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <ahrs_update+0xb38>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a11      	ldr	r2, [pc, #68]	; (8001f80 <ahrs_update+0xb28>)
 8001f3a:	60d3      	str	r3, [r2, #12]
	AHRS.pitch_rate = gyr.y;
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <ahrs_update+0xb38>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4a0f      	ldr	r2, [pc, #60]	; (8001f80 <ahrs_update+0xb28>)
 8001f42:	6113      	str	r3, [r2, #16]
	AHRS.yaw_rate   = gyr.z;
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <ahrs_update+0xb38>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a0d      	ldr	r2, [pc, #52]	; (8001f80 <ahrs_update+0xb28>)
 8001f4a:	6153      	str	r3, [r2, #20]

}
 8001f4c:	bf00      	nop
 8001f4e:	3768      	adds	r7, #104	; 0x68
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bdb0      	pop	{r4, r5, r7, pc}
 8001f54:	f3af 8000 	nop.w
 8001f58:	9999999a 	.word	0x9999999a
 8001f5c:	3fe99999 	.word	0x3fe99999
 8001f60:	9999999a 	.word	0x9999999a
 8001f64:	3fc99999 	.word	0x3fc99999
 8001f68:	47ae147b 	.word	0x47ae147b
 8001f6c:	3fa47ae1 	.word	0x3fa47ae1
 8001f70:	20000148 	.word	0x20000148
 8001f74:	20000124 	.word	0x20000124
 8001f78:	3b9ccccd 	.word	0x3b9ccccd
 8001f7c:	42652ee0 	.word	0x42652ee0
 8001f80:	200000f4 	.word	0x200000f4
 8001f84:	3d4ccccd 	.word	0x3d4ccccd
 8001f88:	200001a8 	.word	0x200001a8
 8001f8c:	200001ac 	.word	0x200001ac
 8001f90:	20000174 	.word	0x20000174

08001f94 <atan2_approx>:
// Initial implementation by Crashpilot1000 (https://github.com/Crashpilot1000/HarakiriWebstore1/blob/396715f73c6fcf859e0db0f34e12fe44bace6483/src/mw.c#L1292)
// Polynomial coefficients by Andor (http://www.dsprelated.com/showthread/comp.dsp/21872-1.php) optimized by Ledvinap to save one multiplication
// Max absolute error 0,000027 degree
// atan2_approx maximum absolute error = 7.152557e-07 rads (4.098114e-05 degree)
float atan2_approx(float y, float x)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b08b      	sub	sp, #44	; 0x2c
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fa4:	623b      	str	r3, [r7, #32]
    absY = fabsf(y);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fac:	61fb      	str	r3, [r7, #28]
    res  = MAX(absX, absY);
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	6979      	ldr	r1, [r7, #20]
 8001fb8:	69b8      	ldr	r0, [r7, #24]
 8001fba:	f7fe ffb1 	bl	8000f20 <__aeabi_fcmpgt>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <atan2_approx+0x34>
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	e000      	b.n	8001fca <atan2_approx+0x36>
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
    if (res) res = MIN(absX, absY) / res;
 8001fcc:	f04f 0100 	mov.w	r1, #0
 8001fd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fd2:	f7fe ff7d 	bl	8000ed0 <__aeabi_fcmpeq>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d114      	bne.n	8002006 <atan2_approx+0x72>
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68f9      	ldr	r1, [r7, #12]
 8001fe6:	6938      	ldr	r0, [r7, #16]
 8001fe8:	f7fe ff7c 	bl	8000ee4 <__aeabi_fcmplt>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <atan2_approx+0x62>
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	e000      	b.n	8001ff8 <atan2_approx+0x64>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fe88 	bl	8000d10 <__aeabi_fdiv>
 8002000:	4603      	mov	r3, r0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
 8002004:	e002      	b.n	800200c <atan2_approx+0x78>
    else res = 0.0f;
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 800200c:	4938      	ldr	r1, [pc, #224]	; (80020f0 <atan2_approx+0x15c>)
 800200e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002010:	f7fe fdca 	bl	8000ba8 <__aeabi_fmul>
 8002014:	4603      	mov	r3, r0
 8002016:	4937      	ldr	r1, [pc, #220]	; (80020f4 <atan2_approx+0x160>)
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fcbb 	bl	8000994 <__aeabi_fsub>
 800201e:	4603      	mov	r3, r0
 8002020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fdc0 	bl	8000ba8 <__aeabi_fmul>
 8002028:	4603      	mov	r3, r0
 800202a:	4933      	ldr	r1, [pc, #204]	; (80020f8 <atan2_approx+0x164>)
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fcb1 	bl	8000994 <__aeabi_fsub>
 8002032:	4603      	mov	r3, r0
 8002034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fdb6 	bl	8000ba8 <__aeabi_fmul>
 800203c:	4603      	mov	r3, r0
 800203e:	492f      	ldr	r1, [pc, #188]	; (80020fc <atan2_approx+0x168>)
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fca7 	bl	8000994 <__aeabi_fsub>
 8002046:	4603      	mov	r3, r0
 8002048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fdac 	bl	8000ba8 <__aeabi_fmul>
 8002050:	4603      	mov	r3, r0
 8002052:	492b      	ldr	r1, [pc, #172]	; (8002100 <atan2_approx+0x16c>)
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fc9d 	bl	8000994 <__aeabi_fsub>
 800205a:	4603      	mov	r3, r0
 800205c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8002060:	4928      	ldr	r1, [pc, #160]	; (8002104 <atan2_approx+0x170>)
 8002062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002064:	f7fe fda0 	bl	8000ba8 <__aeabi_fmul>
 8002068:	4603      	mov	r3, r0
 800206a:	4927      	ldr	r1, [pc, #156]	; (8002108 <atan2_approx+0x174>)
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fc93 	bl	8000998 <__addsf3>
 8002072:	4603      	mov	r3, r0
 8002074:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fd96 	bl	8000ba8 <__aeabi_fmul>
 800207c:	4603      	mov	r3, r0
 800207e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fc88 	bl	8000998 <__addsf3>
 8002088:	4603      	mov	r3, r0
 800208a:	4619      	mov	r1, r3
 800208c:	4620      	mov	r0, r4
 800208e:	f7fe fe3f 	bl	8000d10 <__aeabi_fdiv>
 8002092:	4603      	mov	r3, r0
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8002096:	6a39      	ldr	r1, [r7, #32]
 8002098:	69f8      	ldr	r0, [r7, #28]
 800209a:	f7fe ff41 	bl	8000f20 <__aeabi_fcmpgt>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <atan2_approx+0x11c>
 80020a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a6:	4819      	ldr	r0, [pc, #100]	; (800210c <atan2_approx+0x178>)
 80020a8:	f7fe fc74 	bl	8000994 <__aeabi_fsub>
 80020ac:	4603      	mov	r3, r0
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
    if (x < 0) res = M_PIf - res;
 80020b0:	f04f 0100 	mov.w	r1, #0
 80020b4:	6838      	ldr	r0, [r7, #0]
 80020b6:	f7fe ff15 	bl	8000ee4 <__aeabi_fcmplt>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <atan2_approx+0x138>
 80020c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c2:	4813      	ldr	r0, [pc, #76]	; (8002110 <atan2_approx+0x17c>)
 80020c4:	f7fe fc66 	bl	8000994 <__aeabi_fsub>
 80020c8:	4603      	mov	r3, r0
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    if (y < 0) res = -res;
 80020cc:	f04f 0100 	mov.w	r1, #0
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7fe ff07 	bl	8000ee4 <__aeabi_fcmplt>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <atan2_approx+0x150>
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
    return res;
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	372c      	adds	r7, #44	; 0x2c
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd90      	pop	{r4, r7, pc}
 80020ee:	bf00      	nop
 80020f0:	3d4e0939 	.word	0x3d4e0939
 80020f4:	3e9eb5e3 	.word	0x3e9eb5e3
 80020f8:	3e16fa88 	.word	0x3e16fa88
 80020fc:	3f7ffe45 	.word	0x3f7ffe45
 8002100:	34a8dfa7 	.word	0x34a8dfa7
 8002104:	3f24fb99 	.word	0x3f24fb99
 8002108:	3e16a269 	.word	0x3e16a269
 800210c:	3fc90fdb 	.word	0x3fc90fdb
 8002110:	40490fdb 	.word	0x40490fdb

08002114 <fapplyDeadband>:

    return value >= 0 ? value - deadband : value + deadband;
}

float fapplyDeadband(const float value, const float deadband)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
    if (fabsf(value) < deadband) {
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002124:	4619      	mov	r1, r3
 8002126:	6838      	ldr	r0, [r7, #0]
 8002128:	f7fe fefa 	bl	8000f20 <__aeabi_fcmpgt>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <fapplyDeadband+0x24>
        return 0;
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	e012      	b.n	800215e <fapplyDeadband+0x4a>
    }

    return value >= 0 ? value - deadband : value + deadband;
 8002138:	f04f 0100 	mov.w	r1, #0
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7fe fee5 	bl	8000f0c <__aeabi_fcmpge>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <fapplyDeadband+0x40>
 8002148:	6839      	ldr	r1, [r7, #0]
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe fc22 	bl	8000994 <__aeabi_fsub>
 8002150:	4603      	mov	r3, r0
 8002152:	e004      	b.n	800215e <fapplyDeadband+0x4a>
 8002154:	6839      	ldr	r1, [r7, #0]
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7fe fc1e 	bl	8000998 <__addsf3>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <invSqrt_>:
    return (num << 12) / den;
}


float invSqrt_(float x)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8002170:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7fe fd17 	bl	8000ba8 <__aeabi_fmul>
 800217a:	4603      	mov	r3, r0
 800217c:	617b      	str	r3, [r7, #20]
	float y = x;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002182:	f107 0310 	add.w	r3, r7, #16
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	105a      	asrs	r2, r3, #1
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <invSqrt_+0x74>)
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	6979      	ldr	r1, [r7, #20]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe fd01 	bl	8000ba8 <__aeabi_fmul>
 80021a6:	4603      	mov	r3, r0
 80021a8:	461a      	mov	r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4619      	mov	r1, r3
 80021ae:	4610      	mov	r0, r2
 80021b0:	f7fe fcfa 	bl	8000ba8 <__aeabi_fmul>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4619      	mov	r1, r3
 80021b8:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80021bc:	f7fe fbea 	bl	8000994 <__aeabi_fsub>
 80021c0:	4603      	mov	r3, r0
 80021c2:	461a      	mov	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4619      	mov	r1, r3
 80021c8:	4610      	mov	r0, r2
 80021ca:	f7fe fced 	bl	8000ba8 <__aeabi_fmul>
 80021ce:	4603      	mov	r3, r0
 80021d0:	613b      	str	r3, [r7, #16]
	//y = y * (1.5f - (halfx * y * y));
	return y;
 80021d2:	693b      	ldr	r3, [r7, #16]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	5f3759df 	.word	0x5f3759df

080021e0 <initPWM>:

/**timer pwm
 *
 */
TIM_HandleTypeDef *htimm;
void initPWM(TIM_HandleTypeDef *htim){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	htimm = htim;
 80021e8:	4a10      	ldr	r2, [pc, #64]	; (800222c <initPWM+0x4c>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htim,ch1);
 80021ee:	2100      	movs	r1, #0
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f003 fadf 	bl	80057b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch2);
 80021f6:	2104      	movs	r1, #4
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f003 fadb 	bl	80057b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch3);
 80021fe:	2108      	movs	r1, #8
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f003 fad7 	bl	80057b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim,ch4);
 8002206:	210c      	movs	r1, #12
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f003 fad3 	bl	80057b4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SetAutoreload(htimm,PWM_RELOAD_AFFTER);
 800220e:	4b07      	ldr	r3, [pc, #28]	; (800222c <initPWM+0x4c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f640 0298 	movw	r2, #2200	; 0x898
 8002218:	62da      	str	r2, [r3, #44]	; 0x2c
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <initPWM+0x4c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f640 0298 	movw	r2, #2200	; 0x898
 8002222:	60da      	str	r2, [r3, #12]
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	200001b0 	.word	0x200001b0

08002230 <motoIdle>:
void writeOneshot125(uint32_t Channel,int16_t dulty)
{
	  dulty = constrain(dulty,120,250);
	__HAL_TIM_SetCompare (htimm,Channel,dulty);
}
void motoIdle(){
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare (htimm,ch1,1000);
 8002234:	4b0d      	ldr	r3, [pc, #52]	; (800226c <motoIdle+0x3c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800223e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare (htimm,ch2,1000);
 8002240:	4b0a      	ldr	r3, [pc, #40]	; (800226c <motoIdle+0x3c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800224a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare (htimm,ch3,1000);
 800224c:	4b07      	ldr	r3, [pc, #28]	; (800226c <motoIdle+0x3c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002256:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SetCompare (htimm,ch4,1000);
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <motoIdle+0x3c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	200001b0 	.word	0x200001b0

08002270 <delay_us>:
TIM_HandleTypeDef *htimmz;
bootTime_t boottime;
static uint16_t setoverFlow(int val,int flow_val);


void delay_us(uint32_t val){
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	static uint32_t time_us;
  time_us = micros();
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <delay_us+0x44>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002280:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <delay_us+0x48>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4413      	add	r3, r2
 8002286:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <delay_us+0x4c>)
 8002288:	6013      	str	r3, [r2, #0]
  while((micros() - time_us)<val);
 800228a:	bf00      	nop
 800228c:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <delay_us+0x44>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <delay_us+0x48>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	441a      	add	r2, r3
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <delay_us+0x4c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d8f2      	bhi.n	800228c <delay_us+0x1c>
}
 80022a6:	bf00      	nop
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	200001b8 	.word	0x200001b8
 80022b8:	200001b4 	.word	0x200001b4
 80022bc:	200001bc 	.word	0x200001bc

080022c0 <delay_ms>:

void delay_ms(uint32_t val)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	delay_us(val*1000);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ffcc 	bl	8002270 <delay_us>
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <timer_start>:
  sec_L = millis()/1000;
  boottime.sec   = setoverFlow(sec_L,59);
  boottime.min   = setoverFlow((sec_L/60),59);
  boottime.hour  = setoverFlow((sec_L/3600),23);
}
void timer_start(TIM_HandleTypeDef *htimz){
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	htimmz = htimz;
 80022e8:	4a05      	ldr	r2, [pc, #20]	; (8002300 <timer_start+0x20>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(htimmz);
 80022ee:	4b04      	ldr	r3, [pc, #16]	; (8002300 <timer_start+0x20>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 f9b4 	bl	8005660 <HAL_TIM_Base_Start_IT>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	200001b8 	.word	0x200001b8

08002304 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230a:	f107 0310 	add.w	r3, r7, #16
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002318:	4b2e      	ldr	r3, [pc, #184]	; (80023d4 <MX_GPIO_Init+0xd0>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4a2d      	ldr	r2, [pc, #180]	; (80023d4 <MX_GPIO_Init+0xd0>)
 800231e:	f043 0310 	orr.w	r3, r3, #16
 8002322:	6193      	str	r3, [r2, #24]
 8002324:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <MX_GPIO_Init+0xd0>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <MX_GPIO_Init+0xd0>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <MX_GPIO_Init+0xd0>)
 8002336:	f043 0320 	orr.w	r3, r3, #32
 800233a:	6193      	str	r3, [r2, #24]
 800233c:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <MX_GPIO_Init+0xd0>)
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002348:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <MX_GPIO_Init+0xd0>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	4a21      	ldr	r2, [pc, #132]	; (80023d4 <MX_GPIO_Init+0xd0>)
 800234e:	f043 0304 	orr.w	r3, r3, #4
 8002352:	6193      	str	r3, [r2, #24]
 8002354:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <MX_GPIO_Init+0xd0>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002360:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <MX_GPIO_Init+0xd0>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a1b      	ldr	r2, [pc, #108]	; (80023d4 <MX_GPIO_Init+0xd0>)
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <MX_GPIO_Init+0xd0>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8002378:	2200      	movs	r2, #0
 800237a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800237e:	4816      	ldr	r0, [pc, #88]	; (80023d8 <MX_GPIO_Init+0xd4>)
 8002380:	f001 f8d4 	bl	800352c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002384:	2200      	movs	r2, #0
 8002386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800238a:	4814      	ldr	r0, [pc, #80]	; (80023dc <MX_GPIO_Init+0xd8>)
 800238c:	f001 f8ce 	bl	800352c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_Pin;
 8002390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002396:	2301      	movs	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2302      	movs	r3, #2
 80023a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80023a2:	f107 0310 	add.w	r3, r7, #16
 80023a6:	4619      	mov	r1, r3
 80023a8:	480b      	ldr	r0, [pc, #44]	; (80023d8 <MX_GPIO_Init+0xd4>)
 80023aa:	f000 ff3b 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80023ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2302      	movs	r3, #2
 80023be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	4619      	mov	r1, r3
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_GPIO_Init+0xd8>)
 80023c8:	f000 ff2c 	bl	8003224 <HAL_GPIO_Init>

}
 80023cc:	bf00      	nop
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40011000 	.word	0x40011000
 80023dc:	40010c00 	.word	0x40010c00

080023e0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023e4:	4b12      	ldr	r3, [pc, #72]	; (8002430 <MX_I2C1_Init+0x50>)
 80023e6:	4a13      	ldr	r2, [pc, #76]	; (8002434 <MX_I2C1_Init+0x54>)
 80023e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <MX_I2C1_Init+0x50>)
 80023ec:	4a12      	ldr	r2, [pc, #72]	; (8002438 <MX_I2C1_Init+0x58>)
 80023ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <MX_I2C1_Init+0x50>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <MX_I2C1_Init+0x50>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <MX_I2C1_Init+0x50>)
 80023fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002402:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <MX_I2C1_Init+0x50>)
 8002406:	2200      	movs	r2, #0
 8002408:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <MX_I2C1_Init+0x50>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002410:	4b07      	ldr	r3, [pc, #28]	; (8002430 <MX_I2C1_Init+0x50>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <MX_I2C1_Init+0x50>)
 8002418:	2200      	movs	r2, #0
 800241a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800241c:	4804      	ldr	r0, [pc, #16]	; (8002430 <MX_I2C1_Init+0x50>)
 800241e:	f001 f8b7 	bl	8003590 <HAL_I2C_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002428:	f000 f900 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}
 8002430:	200001c0 	.word	0x200001c0
 8002434:	40005400 	.word	0x40005400
 8002438:	00061a80 	.word	0x00061a80

0800243c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <MX_I2C2_Init+0x50>)
 8002442:	4a13      	ldr	r2, [pc, #76]	; (8002490 <MX_I2C2_Init+0x54>)
 8002444:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <MX_I2C2_Init+0x50>)
 8002448:	4a12      	ldr	r2, [pc, #72]	; (8002494 <MX_I2C2_Init+0x58>)
 800244a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <MX_I2C2_Init+0x50>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <MX_I2C2_Init+0x50>)
 8002454:	2200      	movs	r2, #0
 8002456:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <MX_I2C2_Init+0x50>)
 800245a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800245e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <MX_I2C2_Init+0x50>)
 8002462:	2200      	movs	r2, #0
 8002464:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <MX_I2C2_Init+0x50>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800246c:	4b07      	ldr	r3, [pc, #28]	; (800248c <MX_I2C2_Init+0x50>)
 800246e:	2200      	movs	r2, #0
 8002470:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <MX_I2C2_Init+0x50>)
 8002474:	2200      	movs	r2, #0
 8002476:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002478:	4804      	ldr	r0, [pc, #16]	; (800248c <MX_I2C2_Init+0x50>)
 800247a:	f001 f889 	bl	8003590 <HAL_I2C_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002484:	f000 f8d2 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000214 	.word	0x20000214
 8002490:	40005800 	.word	0x40005800
 8002494:	000186a0 	.word	0x000186a0

08002498 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 0318 	add.w	r3, r7, #24
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a2b      	ldr	r2, [pc, #172]	; (8002560 <HAL_I2C_MspInit+0xc8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d124      	bne.n	8002502 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b8:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <HAL_I2C_MspInit+0xcc>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	4a29      	ldr	r2, [pc, #164]	; (8002564 <HAL_I2C_MspInit+0xcc>)
 80024be:	f043 0308 	orr.w	r3, r3, #8
 80024c2:	6193      	str	r3, [r2, #24]
 80024c4:	4b27      	ldr	r3, [pc, #156]	; (8002564 <HAL_I2C_MspInit+0xcc>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024d0:	23c0      	movs	r3, #192	; 0xc0
 80024d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024d4:	2312      	movs	r3, #18
 80024d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024d8:	2303      	movs	r3, #3
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024dc:	f107 0318 	add.w	r3, r7, #24
 80024e0:	4619      	mov	r1, r3
 80024e2:	4821      	ldr	r0, [pc, #132]	; (8002568 <HAL_I2C_MspInit+0xd0>)
 80024e4:	f000 fe9e 	bl	8003224 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_I2C_MspInit+0xcc>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <HAL_I2C_MspInit+0xcc>)
 80024ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024f2:	61d3      	str	r3, [r2, #28]
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <HAL_I2C_MspInit+0xcc>)
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002500:	e029      	b.n	8002556 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a19      	ldr	r2, [pc, #100]	; (800256c <HAL_I2C_MspInit+0xd4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d124      	bne.n	8002556 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250c:	4b15      	ldr	r3, [pc, #84]	; (8002564 <HAL_I2C_MspInit+0xcc>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	4a14      	ldr	r2, [pc, #80]	; (8002564 <HAL_I2C_MspInit+0xcc>)
 8002512:	f043 0308 	orr.w	r3, r3, #8
 8002516:	6193      	str	r3, [r2, #24]
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_I2C_MspInit+0xcc>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002524:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800252a:	2312      	movs	r3, #18
 800252c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002532:	f107 0318 	add.w	r3, r7, #24
 8002536:	4619      	mov	r1, r3
 8002538:	480b      	ldr	r0, [pc, #44]	; (8002568 <HAL_I2C_MspInit+0xd0>)
 800253a:	f000 fe73 	bl	8003224 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_I2C_MspInit+0xcc>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4a08      	ldr	r2, [pc, #32]	; (8002564 <HAL_I2C_MspInit+0xcc>)
 8002544:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002548:	61d3      	str	r3, [r2, #28]
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_I2C_MspInit+0xcc>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
}
 8002556:	bf00      	nop
 8002558:	3728      	adds	r7, #40	; 0x28
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40005400 	.word	0x40005400
 8002564:	40021000 	.word	0x40021000
 8002568:	40010c00 	.word	0x40010c00
 800256c:	40005800 	.word	0x40005800

08002570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002574:	f000 fcc2 	bl	8002efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002578:	f000 f813 	bl	80025a2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800257c:	f7ff fec2 	bl	8002304 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002580:	f7ff ff2e 	bl	80023e0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002584:	f000 fab0 	bl	8002ae8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002588:	f000 fad8 	bl	8002b3c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800258c:	f000 f940 	bl	8002810 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002590:	f000 f9d6 	bl	8002940 <MX_TIM4_Init>
  MX_SPI2_Init();
 8002594:	f000 f850 	bl	8002638 <MX_SPI2_Init>
  MX_I2C2_Init();
 8002598:	f7ff ff50 	bl	800243c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  //i2cDectect(&hi2c1);
   main_loop();
 800259c:	f000 fba1 	bl	8002ce2 <main_loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <main+0x30>

080025a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b090      	sub	sp, #64	; 0x40
 80025a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025a8:	f107 0318 	add.w	r3, r7, #24
 80025ac:	2228      	movs	r2, #40	; 0x28
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f004 f87b 	bl	80066ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025c4:	2301      	movs	r3, #1
 80025c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025cc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025ce:	2300      	movs	r3, #0
 80025d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025d2:	2301      	movs	r3, #1
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025d6:	2302      	movs	r3, #2
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80025e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e6:	f107 0318 	add.w	r3, r7, #24
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 fb54 	bl	8004c98 <HAL_RCC_OscConfig>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <SystemClock_Config+0x58>
  {
    Error_Handler();
 80025f6:	f000 f819 	bl	800262c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025fa:	230f      	movs	r3, #15
 80025fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025fe:	2302      	movs	r3, #2
 8002600:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800260a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	2102      	movs	r1, #2
 8002614:	4618      	mov	r0, r3
 8002616:	f002 fdc1 	bl	800519c <HAL_RCC_ClockConfig>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002620:	f000 f804 	bl	800262c <Error_Handler>
  }
}
 8002624:	bf00      	nop
 8002626:	3740      	adds	r7, #64	; 0x40
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002630:	b672      	cpsid	i
}
 8002632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002634:	e7fe      	b.n	8002634 <Error_Handler+0x8>
	...

08002638 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <MX_SPI2_Init+0x64>)
 800263e:	4a18      	ldr	r2, [pc, #96]	; (80026a0 <MX_SPI2_Init+0x68>)
 8002640:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <MX_SPI2_Init+0x64>)
 8002644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002648:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <MX_SPI2_Init+0x64>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <MX_SPI2_Init+0x64>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <MX_SPI2_Init+0x64>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <MX_SPI2_Init+0x64>)
 800265e:	2200      	movs	r2, #0
 8002660:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <MX_SPI2_Init+0x64>)
 8002664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002668:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <MX_SPI2_Init+0x64>)
 800266c:	2200      	movs	r2, #0
 800266e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <MX_SPI2_Init+0x64>)
 8002672:	2200      	movs	r2, #0
 8002674:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <MX_SPI2_Init+0x64>)
 8002678:	2200      	movs	r2, #0
 800267a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <MX_SPI2_Init+0x64>)
 800267e:	2200      	movs	r2, #0
 8002680:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <MX_SPI2_Init+0x64>)
 8002684:	220a      	movs	r2, #10
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002688:	4804      	ldr	r0, [pc, #16]	; (800269c <MX_SPI2_Init+0x64>)
 800268a:	f002 ff15 	bl	80054b8 <HAL_SPI_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002694:	f7ff ffca 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000268 	.word	0x20000268
 80026a0:	40003800 	.word	0x40003800

080026a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <HAL_SPI_MspInit+0x8c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d131      	bne.n	8002728 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_SPI_MspInit+0x90>)
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <HAL_SPI_MspInit+0x90>)
 80026ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ce:	61d3      	str	r3, [r2, #28]
 80026d0:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_SPI_MspInit+0x90>)
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <HAL_SPI_MspInit+0x90>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a14      	ldr	r2, [pc, #80]	; (8002734 <HAL_SPI_MspInit+0x90>)
 80026e2:	f043 0308 	orr.w	r3, r3, #8
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_SPI_MspInit+0x90>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80026f4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80026f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002702:	f107 0310 	add.w	r3, r7, #16
 8002706:	4619      	mov	r1, r3
 8002708:	480b      	ldr	r0, [pc, #44]	; (8002738 <HAL_SPI_MspInit+0x94>)
 800270a:	f000 fd8b 	bl	8003224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800270e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	4619      	mov	r1, r3
 8002722:	4805      	ldr	r0, [pc, #20]	; (8002738 <HAL_SPI_MspInit+0x94>)
 8002724:	f000 fd7e 	bl	8003224 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002728:	bf00      	nop
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40003800 	.word	0x40003800
 8002734:	40021000 	.word	0x40021000
 8002738:	40010c00 	.word	0x40010c00

0800273c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_MspInit+0x5c>)
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	4a14      	ldr	r2, [pc, #80]	; (8002798 <HAL_MspInit+0x5c>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6193      	str	r3, [r2, #24]
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_MspInit+0x5c>)
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_MspInit+0x5c>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <HAL_MspInit+0x5c>)
 8002760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002764:	61d3      	str	r3, [r2, #28]
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <HAL_MspInit+0x5c>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <HAL_MspInit+0x60>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	4a04      	ldr	r2, [pc, #16]	; (800279c <HAL_MspInit+0x60>)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	40021000 	.word	0x40021000
 800279c:	40010000 	.word	0x40010000

080027a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <NMI_Handler+0x4>

080027a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027aa:	e7fe      	b.n	80027aa <HardFault_Handler+0x4>

080027ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <MemManage_Handler+0x4>

080027b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b6:	e7fe      	b.n	80027b6 <BusFault_Handler+0x4>

080027b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <UsageFault_Handler+0x4>

080027be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr

080027e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027e6:	f000 fbcf 	bl	8002f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <TIM4_IRQHandler+0x10>)
 80027f6:	f003 f87f 	bl	80058f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000308 	.word	0x20000308

08002804 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08e      	sub	sp, #56	; 0x38
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002824:	f107 0320 	add.w	r3, r7, #32
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
 800283c:	615a      	str	r2, [r3, #20]
 800283e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002840:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <MX_TIM3_Init+0x128>)
 8002842:	4a3e      	ldr	r2, [pc, #248]	; (800293c <MX_TIM3_Init+0x12c>)
 8002844:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002846:	4b3c      	ldr	r3, [pc, #240]	; (8002938 <MX_TIM3_Init+0x128>)
 8002848:	2247      	movs	r2, #71	; 0x47
 800284a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800284c:	4b3a      	ldr	r3, [pc, #232]	; (8002938 <MX_TIM3_Init+0x128>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002852:	4b39      	ldr	r3, [pc, #228]	; (8002938 <MX_TIM3_Init+0x128>)
 8002854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002858:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800285a:	4b37      	ldr	r3, [pc, #220]	; (8002938 <MX_TIM3_Init+0x128>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002860:	4b35      	ldr	r3, [pc, #212]	; (8002938 <MX_TIM3_Init+0x128>)
 8002862:	2200      	movs	r2, #0
 8002864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002866:	4834      	ldr	r0, [pc, #208]	; (8002938 <MX_TIM3_Init+0x128>)
 8002868:	f002 feaa 	bl	80055c0 <HAL_TIM_Base_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002872:	f7ff fedb 	bl	800262c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800287a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800287c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002880:	4619      	mov	r1, r3
 8002882:	482d      	ldr	r0, [pc, #180]	; (8002938 <MX_TIM3_Init+0x128>)
 8002884:	f003 fa02 	bl	8005c8c <HAL_TIM_ConfigClockSource>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800288e:	f7ff fecd 	bl	800262c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002892:	4829      	ldr	r0, [pc, #164]	; (8002938 <MX_TIM3_Init+0x128>)
 8002894:	f002 ff36 	bl	8005704 <HAL_TIM_PWM_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800289e:	f7ff fec5 	bl	800262c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028aa:	f107 0320 	add.w	r3, r7, #32
 80028ae:	4619      	mov	r1, r3
 80028b0:	4821      	ldr	r0, [pc, #132]	; (8002938 <MX_TIM3_Init+0x128>)
 80028b2:	f003 fd83 	bl	80063bc <HAL_TIMEx_MasterConfigSynchronization>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80028bc:	f7ff feb6 	bl	800262c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028c0:	2360      	movs	r3, #96	; 0x60
 80028c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	2200      	movs	r2, #0
 80028d4:	4619      	mov	r1, r3
 80028d6:	4818      	ldr	r0, [pc, #96]	; (8002938 <MX_TIM3_Init+0x128>)
 80028d8:	f003 f916 	bl	8005b08 <HAL_TIM_PWM_ConfigChannel>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80028e2:	f7ff fea3 	bl	800262c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	2204      	movs	r2, #4
 80028ea:	4619      	mov	r1, r3
 80028ec:	4812      	ldr	r0, [pc, #72]	; (8002938 <MX_TIM3_Init+0x128>)
 80028ee:	f003 f90b 	bl	8005b08 <HAL_TIM_PWM_ConfigChannel>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80028f8:	f7ff fe98 	bl	800262c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	2208      	movs	r2, #8
 8002900:	4619      	mov	r1, r3
 8002902:	480d      	ldr	r0, [pc, #52]	; (8002938 <MX_TIM3_Init+0x128>)
 8002904:	f003 f900 	bl	8005b08 <HAL_TIM_PWM_ConfigChannel>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800290e:	f7ff fe8d 	bl	800262c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002912:	1d3b      	adds	r3, r7, #4
 8002914:	220c      	movs	r2, #12
 8002916:	4619      	mov	r1, r3
 8002918:	4807      	ldr	r0, [pc, #28]	; (8002938 <MX_TIM3_Init+0x128>)
 800291a:	f003 f8f5 	bl	8005b08 <HAL_TIM_PWM_ConfigChannel>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002924:	f7ff fe82 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002928:	4803      	ldr	r0, [pc, #12]	; (8002938 <MX_TIM3_Init+0x128>)
 800292a:	f000 f891 	bl	8002a50 <HAL_TIM_MspPostInit>

}
 800292e:	bf00      	nop
 8002930:	3738      	adds	r7, #56	; 0x38
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200002c0 	.word	0x200002c0
 800293c:	40000400 	.word	0x40000400

08002940 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002946:	f107 0308 	add.w	r3, r7, #8
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	609a      	str	r2, [r3, #8]
 8002952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002954:	463b      	mov	r3, r7
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800295c:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <MX_TIM4_Init+0x94>)
 800295e:	4a1e      	ldr	r2, [pc, #120]	; (80029d8 <MX_TIM4_Init+0x98>)
 8002960:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8002962:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <MX_TIM4_Init+0x94>)
 8002964:	2247      	movs	r2, #71	; 0x47
 8002966:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002968:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <MX_TIM4_Init+0x94>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800296e:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <MX_TIM4_Init+0x94>)
 8002970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002974:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002976:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <MX_TIM4_Init+0x94>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800297c:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <MX_TIM4_Init+0x94>)
 800297e:	2280      	movs	r2, #128	; 0x80
 8002980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002982:	4814      	ldr	r0, [pc, #80]	; (80029d4 <MX_TIM4_Init+0x94>)
 8002984:	f002 fe1c 	bl	80055c0 <HAL_TIM_Base_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800298e:	f7ff fe4d 	bl	800262c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002996:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002998:	f107 0308 	add.w	r3, r7, #8
 800299c:	4619      	mov	r1, r3
 800299e:	480d      	ldr	r0, [pc, #52]	; (80029d4 <MX_TIM4_Init+0x94>)
 80029a0:	f003 f974 	bl	8005c8c <HAL_TIM_ConfigClockSource>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80029aa:	f7ff fe3f 	bl	800262c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029b6:	463b      	mov	r3, r7
 80029b8:	4619      	mov	r1, r3
 80029ba:	4806      	ldr	r0, [pc, #24]	; (80029d4 <MX_TIM4_Init+0x94>)
 80029bc:	f003 fcfe 	bl	80063bc <HAL_TIMEx_MasterConfigSynchronization>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80029c6:	f7ff fe31 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000308 	.word	0x20000308
 80029d8:	40000800 	.word	0x40000800

080029dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <HAL_TIM_Base_MspInit+0x68>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d10c      	bne.n	8002a08 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ee:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <HAL_TIM_Base_MspInit+0x6c>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <HAL_TIM_Base_MspInit+0x6c>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	61d3      	str	r3, [r2, #28]
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <HAL_TIM_Base_MspInit+0x6c>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002a06:	e018      	b.n	8002a3a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0f      	ldr	r2, [pc, #60]	; (8002a4c <HAL_TIM_Base_MspInit+0x70>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d113      	bne.n	8002a3a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a12:	4b0d      	ldr	r3, [pc, #52]	; (8002a48 <HAL_TIM_Base_MspInit+0x6c>)
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	4a0c      	ldr	r2, [pc, #48]	; (8002a48 <HAL_TIM_Base_MspInit+0x6c>)
 8002a18:	f043 0304 	orr.w	r3, r3, #4
 8002a1c:	61d3      	str	r3, [r2, #28]
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_TIM_Base_MspInit+0x6c>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	201e      	movs	r0, #30
 8002a30:	f000 fbc1 	bl	80031b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a34:	201e      	movs	r0, #30
 8002a36:	f000 fbda 	bl	80031ee <HAL_NVIC_EnableIRQ>
}
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40000800 	.word	0x40000800

08002a50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 0310 	add.w	r3, r7, #16
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1b      	ldr	r2, [pc, #108]	; (8002ad8 <HAL_TIM_MspPostInit+0x88>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d12f      	bne.n	8002ad0 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a70:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <HAL_TIM_MspPostInit+0x8c>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	4a19      	ldr	r2, [pc, #100]	; (8002adc <HAL_TIM_MspPostInit+0x8c>)
 8002a76:	f043 0304 	orr.w	r3, r3, #4
 8002a7a:	6193      	str	r3, [r2, #24]
 8002a7c:	4b17      	ldr	r3, [pc, #92]	; (8002adc <HAL_TIM_MspPostInit+0x8c>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a88:	4b14      	ldr	r3, [pc, #80]	; (8002adc <HAL_TIM_MspPostInit+0x8c>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	4a13      	ldr	r2, [pc, #76]	; (8002adc <HAL_TIM_MspPostInit+0x8c>)
 8002a8e:	f043 0308 	orr.w	r3, r3, #8
 8002a92:	6193      	str	r3, [r2, #24]
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <HAL_TIM_MspPostInit+0x8c>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aa0:	23c0      	movs	r3, #192	; 0xc0
 8002aa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aac:	f107 0310 	add.w	r3, r7, #16
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	480b      	ldr	r0, [pc, #44]	; (8002ae0 <HAL_TIM_MspPostInit+0x90>)
 8002ab4:	f000 fbb6 	bl	8003224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac4:	f107 0310 	add.w	r3, r7, #16
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4806      	ldr	r0, [pc, #24]	; (8002ae4 <HAL_TIM_MspPostInit+0x94>)
 8002acc:	f000 fbaa 	bl	8003224 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ad0:	bf00      	nop
 8002ad2:	3720      	adds	r7, #32
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40010800 	.word	0x40010800
 8002ae4:	40010c00 	.word	0x40010c00

08002ae8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002aec:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002aee:	4a12      	ldr	r2, [pc, #72]	; (8002b38 <MX_USART1_UART_Init+0x50>)
 8002af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002af2:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002afa:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b0c:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002b0e:	220c      	movs	r2, #12
 8002b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b12:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b1e:	4805      	ldr	r0, [pc, #20]	; (8002b34 <MX_USART1_UART_Init+0x4c>)
 8002b20:	f003 fcbc 	bl	800649c <HAL_UART_Init>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b2a:	f7ff fd7f 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000350 	.word	0x20000350
 8002b38:	40013800 	.word	0x40013800

08002b3c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <MX_USART2_UART_Init+0x4c>)
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <MX_USART2_UART_Init+0x50>)
 8002b44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <MX_USART2_UART_Init+0x4c>)
 8002b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <MX_USART2_UART_Init+0x4c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <MX_USART2_UART_Init+0x4c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <MX_USART2_UART_Init+0x4c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <MX_USART2_UART_Init+0x4c>)
 8002b62:	220c      	movs	r2, #12
 8002b64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <MX_USART2_UART_Init+0x4c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <MX_USART2_UART_Init+0x4c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b72:	4805      	ldr	r0, [pc, #20]	; (8002b88 <MX_USART2_UART_Init+0x4c>)
 8002b74:	f003 fc92 	bl	800649c <HAL_UART_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b7e:	f7ff fd55 	bl	800262c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000398 	.word	0x20000398
 8002b8c:	40004400 	.word	0x40004400

08002b90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 0318 	add.w	r3, r7, #24
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a37      	ldr	r2, [pc, #220]	; (8002c88 <HAL_UART_MspInit+0xf8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d132      	bne.n	8002c16 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bb0:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <HAL_UART_MspInit+0xfc>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	4a35      	ldr	r2, [pc, #212]	; (8002c8c <HAL_UART_MspInit+0xfc>)
 8002bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bba:	6193      	str	r3, [r2, #24]
 8002bbc:	4b33      	ldr	r3, [pc, #204]	; (8002c8c <HAL_UART_MspInit+0xfc>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc8:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <HAL_UART_MspInit+0xfc>)
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	4a2f      	ldr	r2, [pc, #188]	; (8002c8c <HAL_UART_MspInit+0xfc>)
 8002bce:	f043 0304 	orr.w	r3, r3, #4
 8002bd2:	6193      	str	r3, [r2, #24]
 8002bd4:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <HAL_UART_MspInit+0xfc>)
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	2302      	movs	r3, #2
 8002be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bea:	2303      	movs	r3, #3
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bee:	f107 0318 	add.w	r3, r7, #24
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4826      	ldr	r0, [pc, #152]	; (8002c90 <HAL_UART_MspInit+0x100>)
 8002bf6:	f000 fb15 	bl	8003224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c08:	f107 0318 	add.w	r3, r7, #24
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4820      	ldr	r0, [pc, #128]	; (8002c90 <HAL_UART_MspInit+0x100>)
 8002c10:	f000 fb08 	bl	8003224 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c14:	e034      	b.n	8002c80 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1e      	ldr	r2, [pc, #120]	; (8002c94 <HAL_UART_MspInit+0x104>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d12f      	bne.n	8002c80 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c20:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <HAL_UART_MspInit+0xfc>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	4a19      	ldr	r2, [pc, #100]	; (8002c8c <HAL_UART_MspInit+0xfc>)
 8002c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c2a:	61d3      	str	r3, [r2, #28]
 8002c2c:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <HAL_UART_MspInit+0xfc>)
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c38:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <HAL_UART_MspInit+0xfc>)
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	4a13      	ldr	r2, [pc, #76]	; (8002c8c <HAL_UART_MspInit+0xfc>)
 8002c3e:	f043 0304 	orr.w	r3, r3, #4
 8002c42:	6193      	str	r3, [r2, #24]
 8002c44:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <HAL_UART_MspInit+0xfc>)
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c50:	2304      	movs	r3, #4
 8002c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	2302      	movs	r3, #2
 8002c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5c:	f107 0318 	add.w	r3, r7, #24
 8002c60:	4619      	mov	r1, r3
 8002c62:	480b      	ldr	r0, [pc, #44]	; (8002c90 <HAL_UART_MspInit+0x100>)
 8002c64:	f000 fade 	bl	8003224 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c68:	2308      	movs	r3, #8
 8002c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c74:	f107 0318 	add.w	r3, r7, #24
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4805      	ldr	r0, [pc, #20]	; (8002c90 <HAL_UART_MspInit+0x100>)
 8002c7c:	f000 fad2 	bl	8003224 <HAL_GPIO_Init>
}
 8002c80:	bf00      	nop
 8002c82:	3728      	adds	r7, #40	; 0x28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40013800 	.word	0x40013800
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40010800 	.word	0x40010800
 8002c94:	40004400 	.word	0x40004400

08002c98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c98:	f7ff fdb4 	bl	8002804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c9c:	480b      	ldr	r0, [pc, #44]	; (8002ccc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c9e:	490c      	ldr	r1, [pc, #48]	; (8002cd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ca0:	4a0c      	ldr	r2, [pc, #48]	; (8002cd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ca4:	e002      	b.n	8002cac <LoopCopyDataInit>

08002ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002caa:	3304      	adds	r3, #4

08002cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb0:	d3f9      	bcc.n	8002ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cb2:	4a09      	ldr	r2, [pc, #36]	; (8002cd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002cb4:	4c09      	ldr	r4, [pc, #36]	; (8002cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb8:	e001      	b.n	8002cbe <LoopFillZerobss>

08002cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cbc:	3204      	adds	r2, #4

08002cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc0:	d3fb      	bcc.n	8002cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cc2:	f003 fccf 	bl	8006664 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cc6:	f7ff fc53 	bl	8002570 <main>
  bx lr
 8002cca:	4770      	bx	lr
  ldr r0, =_sdata
 8002ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd0:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002cd4:	080067e0 	.word	0x080067e0
  ldr r2, =_sbss
 8002cd8:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002cdc:	200003fc 	.word	0x200003fc

08002ce0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ce0:	e7fe      	b.n	8002ce0 <ADC1_2_IRQHandler>

08002ce2 <main_loop>:

#include "scheduler.h"
void main_loop(){
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	af00      	add	r7, sp, #0
	init_sche();
 8002ce6:	f000 f80f 	bl	8002d08 <init_sche>
	while(1)
	{
		start_scheduler();
 8002cea:	f000 f839 	bl	8002d60 <start_scheduler>
 8002cee:	e7fc      	b.n	8002cea <main_loop+0x8>

08002cf0 <tongepin>:
#define LOOP_US  4000
#define MAX_LOOP_BREAK_US  3900
uint32_t max_excution_time_us;
uint32_t num_tasks;

void tongepin(){
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002cf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cf8:	4802      	ldr	r0, [pc, #8]	; (8002d04 <tongepin+0x14>)
 8002cfa:	f000 fc2f 	bl	800355c <HAL_GPIO_TogglePin>
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40011000 	.word	0x40011000

08002d08 <init_sche>:
  //{pwm2esc,         0,0,0,1},/*  esc task  500 hz*/
   {tongepin,         0,0,0,250}
  //{ibusGet,         0,0,0,10},/*  receiver task  50 hz*/
};

void init_sche(){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,1);
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d12:	480d      	ldr	r0, [pc, #52]	; (8002d48 <init_sche+0x40>)
 8002d14:	f000 fc0a 	bl	800352c <HAL_GPIO_WritePin>
    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	ms5611_init(&hi2c1);
 8002d18:	480c      	ldr	r0, [pc, #48]	; (8002d4c <init_sche+0x44>)
 8002d1a:	f7fe f9ff 	bl	800111c <ms5611_init>
	timer_start(&htim4);
 8002d1e:	480c      	ldr	r0, [pc, #48]	; (8002d50 <init_sche+0x48>)
 8002d20:	f7ff fade 	bl	80022e0 <timer_start>
	initPWM(&htim3);
 8002d24:	480b      	ldr	r0, [pc, #44]	; (8002d54 <init_sche+0x4c>)
 8002d26:	f7ff fa5b 	bl	80021e0 <initPWM>
    //ibusInit(&huart2,115200);
	//mavlinkInit(SYS_ID,0,&huart2,115200);
	mpu_init();
 8002d2a:	f7fe fb89 	bl	8001440 <mpu_init>
	motoIdle();
 8002d2e:	f7ff fa7f 	bl	8002230 <motoIdle>
	//qmc5883_init(&hi2c1);
    //bmp280_init();
	num_tasks = 0;
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <init_sche+0x50>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
	num_tasks  = sizeof(task)/sizeof(task_t);
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <init_sche+0x50>)
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	601a      	str	r2, [r3, #0]
	max_excution_time_us = 0;
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <init_sche+0x54>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
}
 8002d44:	bf00      	nop
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40011000 	.word	0x40011000
 8002d4c:	200001c0 	.word	0x200001c0
 8002d50:	20000308 	.word	0x20000308
 8002d54:	200002c0 	.word	0x200002c0
 8002d58:	200003ec 	.word	0x200003ec
 8002d5c:	200003e8 	.word	0x200003e8

08002d60 <start_scheduler>:

static uint32_t time_us;
void start_scheduler() {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0

  static int counter = 0;
  uint32_t time_1;
  uint32_t total_execution_time_us = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < num_tasks; i++){
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	e077      	b.n	8002e60 <start_scheduler+0x100>
      if((task[i].exec != NULL) && (counter % task[i].period == 0)){
 8002d70:	4959      	ldr	r1, [pc, #356]	; (8002ed8 <start_scheduler+0x178>)
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d06a      	beq.n	8002e5a <start_scheduler+0xfa>
 8002d84:	4b55      	ldr	r3, [pc, #340]	; (8002edc <start_scheduler+0x17c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4853      	ldr	r0, [pc, #332]	; (8002ed8 <start_scheduler+0x178>)
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4403      	add	r3, r0
 8002d98:	3310      	adds	r3, #16
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d157      	bne.n	8002e5a <start_scheduler+0xfa>
        time_1 = micros();
 8002daa:	4b4d      	ldr	r3, [pc, #308]	; (8002ee0 <start_scheduler+0x180>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db2:	4b4c      	ldr	r3, [pc, #304]	; (8002ee4 <start_scheduler+0x184>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4413      	add	r3, r2
 8002db8:	607b      	str	r3, [r7, #4]
        task[i].execution_cycle_us = micros() - task[i].last_exec_time_us;
 8002dba:	4b49      	ldr	r3, [pc, #292]	; (8002ee0 <start_scheduler+0x180>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc2:	4b48      	ldr	r3, [pc, #288]	; (8002ee4 <start_scheduler+0x184>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	18d1      	adds	r1, r2, r3
 8002dc8:	4843      	ldr	r0, [pc, #268]	; (8002ed8 <start_scheduler+0x178>)
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4403      	add	r3, r0
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	1ac9      	subs	r1, r1, r3
 8002ddc:	483e      	ldr	r0, [pc, #248]	; (8002ed8 <start_scheduler+0x178>)
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4403      	add	r3, r0
 8002dea:	3308      	adds	r3, #8
 8002dec:	6019      	str	r1, [r3, #0]
        task[i].last_exec_time_us = time_1;
 8002dee:	493a      	ldr	r1, [pc, #232]	; (8002ed8 <start_scheduler+0x178>)
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	601a      	str	r2, [r3, #0]
        task[i].exec();
 8002e02:	4935      	ldr	r1, [pc, #212]	; (8002ed8 <start_scheduler+0x178>)
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4798      	blx	r3
        task[i].execution_time_us = micros() - time_1;
 8002e14:	4b32      	ldr	r3, [pc, #200]	; (8002ee0 <start_scheduler+0x180>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e1c:	4b31      	ldr	r3, [pc, #196]	; (8002ee4 <start_scheduler+0x184>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	441a      	add	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	1ad1      	subs	r1, r2, r3
 8002e26:	482c      	ldr	r0, [pc, #176]	; (8002ed8 <start_scheduler+0x178>)
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4403      	add	r3, r0
 8002e34:	3304      	adds	r3, #4
 8002e36:	6019      	str	r1, [r3, #0]
        total_execution_time_us += task[i].execution_time_us;
 8002e38:	4927      	ldr	r1, [pc, #156]	; (8002ed8 <start_scheduler+0x178>)
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	3304      	adds	r3, #4
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
        if(total_execution_time_us > MAX_LOOP_BREAK_US){
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f640 723c 	movw	r2, #3900	; 0xf3c
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d808      	bhi.n	8002e6c <start_scheduler+0x10c>
  for (int i = 0; i < num_tasks; i++){
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <start_scheduler+0x188>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d382      	bcc.n	8002d70 <start_scheduler+0x10>
 8002e6a:	e000      	b.n	8002e6e <start_scheduler+0x10e>
          break;
 8002e6c:	bf00      	nop
        }
      }
  }
  max_excution_time_us = total_execution_time_us;
 8002e6e:	4a1f      	ldr	r2, [pc, #124]	; (8002eec <start_scheduler+0x18c>)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6013      	str	r3, [r2, #0]
  counter ++;
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <start_scheduler+0x17c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	4a18      	ldr	r2, [pc, #96]	; (8002edc <start_scheduler+0x17c>)
 8002e7c:	6013      	str	r3, [r2, #0]
  if(counter == 3999)counter = 0;
 8002e7e:	4b17      	ldr	r3, [pc, #92]	; (8002edc <start_scheduler+0x17c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d102      	bne.n	8002e90 <start_scheduler+0x130>
 8002e8a:	4b14      	ldr	r3, [pc, #80]	; (8002edc <start_scheduler+0x17c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
  while(( micros() - time_us )<LOOP_US);
 8002e90:	bf00      	nop
 8002e92:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <start_scheduler+0x180>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e9a:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <start_scheduler+0x184>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	441a      	add	r2, r3
 8002ea0:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <start_scheduler+0x190>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002eaa:	d3f2      	bcc.n	8002e92 <start_scheduler+0x132>
  time_us = micros();
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <start_scheduler+0x180>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <start_scheduler+0x184>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4413      	add	r3, r2
 8002eba:	4a0d      	ldr	r2, [pc, #52]	; (8002ef0 <start_scheduler+0x190>)
 8002ebc:	6013      	str	r3, [r2, #0]
  mil = millis();
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <start_scheduler+0x184>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a0c      	ldr	r2, [pc, #48]	; (8002ef4 <start_scheduler+0x194>)
 8002ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec8:	099b      	lsrs	r3, r3, #6
 8002eca:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <start_scheduler+0x198>)
 8002ecc:	6013      	str	r3, [r2, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000024 	.word	0x20000024
 8002edc:	200003f4 	.word	0x200003f4
 8002ee0:	200001b8 	.word	0x200001b8
 8002ee4:	200003e0 	.word	0x200003e0
 8002ee8:	200003ec 	.word	0x200003ec
 8002eec:	200003e8 	.word	0x200003e8
 8002ef0:	200003f0 	.word	0x200003f0
 8002ef4:	10624dd3 	.word	0x10624dd3
 8002ef8:	200003e4 	.word	0x200003e4

08002efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_Init+0x28>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <HAL_Init+0x28>)
 8002f06:	f043 0310 	orr.w	r3, r3, #16
 8002f0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f0c:	2003      	movs	r0, #3
 8002f0e:	f000 f947 	bl	80031a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f12:	200f      	movs	r0, #15
 8002f14:	f000 f808 	bl	8002f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f18:	f7ff fc10 	bl	800273c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40022000 	.word	0x40022000

08002f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f30:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_InitTick+0x54>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_InitTick+0x58>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f95f 	bl	800320a <HAL_SYSTICK_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00e      	b.n	8002f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b0f      	cmp	r3, #15
 8002f5a:	d80a      	bhi.n	8002f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f000 f927 	bl	80031b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f68:	4a06      	ldr	r2, [pc, #24]	; (8002f84 <HAL_InitTick+0x5c>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e000      	b.n	8002f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000020 	.word	0x20000020
 8002f80:	20000050 	.word	0x20000050
 8002f84:	2000004c 	.word	0x2000004c

08002f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_IncTick+0x1c>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_IncTick+0x20>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4413      	add	r3, r2
 8002f98:	4a03      	ldr	r2, [pc, #12]	; (8002fa8 <HAL_IncTick+0x20>)
 8002f9a:	6013      	str	r3, [r2, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	20000050 	.word	0x20000050
 8002fa8:	200003f8 	.word	0x200003f8

08002fac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb0:	4b02      	ldr	r3, [pc, #8]	; (8002fbc <HAL_GetTick+0x10>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	200003f8 	.word	0x200003f8

08002fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fc8:	f7ff fff0 	bl	8002fac <HAL_GetTick>
 8002fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d005      	beq.n	8002fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fda:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <HAL_Delay+0x44>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fe6:	bf00      	nop
 8002fe8:	f7ff ffe0 	bl	8002fac <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d8f7      	bhi.n	8002fe8 <HAL_Delay+0x28>
  {
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000050 	.word	0x20000050

08003008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <__NVIC_SetPriorityGrouping+0x44>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003024:	4013      	ands	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800303a:	4a04      	ldr	r2, [pc, #16]	; (800304c <__NVIC_SetPriorityGrouping+0x44>)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	60d3      	str	r3, [r2, #12]
}
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003054:	4b04      	ldr	r3, [pc, #16]	; (8003068 <__NVIC_GetPriorityGrouping+0x18>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	0a1b      	lsrs	r3, r3, #8
 800305a:	f003 0307 	and.w	r3, r3, #7
}
 800305e:	4618      	mov	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	2b00      	cmp	r3, #0
 800307c:	db0b      	blt.n	8003096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	f003 021f 	and.w	r2, r3, #31
 8003084:	4906      	ldr	r1, [pc, #24]	; (80030a0 <__NVIC_EnableIRQ+0x34>)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	2001      	movs	r0, #1
 800308e:	fa00 f202 	lsl.w	r2, r0, r2
 8003092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	e000e100 	.word	0xe000e100

080030a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	6039      	str	r1, [r7, #0]
 80030ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	db0a      	blt.n	80030ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	490c      	ldr	r1, [pc, #48]	; (80030f0 <__NVIC_SetPriority+0x4c>)
 80030be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c2:	0112      	lsls	r2, r2, #4
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	440b      	add	r3, r1
 80030c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030cc:	e00a      	b.n	80030e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4908      	ldr	r1, [pc, #32]	; (80030f4 <__NVIC_SetPriority+0x50>)
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	3b04      	subs	r3, #4
 80030dc:	0112      	lsls	r2, r2, #4
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	440b      	add	r3, r1
 80030e2:	761a      	strb	r2, [r3, #24]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000e100 	.word	0xe000e100
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	; 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f1c3 0307 	rsb	r3, r3, #7
 8003112:	2b04      	cmp	r3, #4
 8003114:	bf28      	it	cs
 8003116:	2304      	movcs	r3, #4
 8003118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3304      	adds	r3, #4
 800311e:	2b06      	cmp	r3, #6
 8003120:	d902      	bls.n	8003128 <NVIC_EncodePriority+0x30>
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3b03      	subs	r3, #3
 8003126:	e000      	b.n	800312a <NVIC_EncodePriority+0x32>
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	f04f 32ff 	mov.w	r2, #4294967295
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	401a      	ands	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003140:	f04f 31ff 	mov.w	r1, #4294967295
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	43d9      	mvns	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	4313      	orrs	r3, r2
         );
}
 8003152:	4618      	mov	r0, r3
 8003154:	3724      	adds	r7, #36	; 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800316c:	d301      	bcc.n	8003172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800316e:	2301      	movs	r3, #1
 8003170:	e00f      	b.n	8003192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003172:	4a0a      	ldr	r2, [pc, #40]	; (800319c <SysTick_Config+0x40>)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3b01      	subs	r3, #1
 8003178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800317a:	210f      	movs	r1, #15
 800317c:	f04f 30ff 	mov.w	r0, #4294967295
 8003180:	f7ff ff90 	bl	80030a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <SysTick_Config+0x40>)
 8003186:	2200      	movs	r2, #0
 8003188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800318a:	4b04      	ldr	r3, [pc, #16]	; (800319c <SysTick_Config+0x40>)
 800318c:	2207      	movs	r2, #7
 800318e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	e000e010 	.word	0xe000e010

080031a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ff2d 	bl	8003008 <__NVIC_SetPriorityGrouping>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	4603      	mov	r3, r0
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031c8:	f7ff ff42 	bl	8003050 <__NVIC_GetPriorityGrouping>
 80031cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	6978      	ldr	r0, [r7, #20]
 80031d4:	f7ff ff90 	bl	80030f8 <NVIC_EncodePriority>
 80031d8:	4602      	mov	r2, r0
 80031da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff5f 	bl	80030a4 <__NVIC_SetPriority>
}
 80031e6:	bf00      	nop
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff35 	bl	800306c <__NVIC_EnableIRQ>
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff ffa2 	bl	800315c <SysTick_Config>
 8003218:	4603      	mov	r3, r0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003224:	b480      	push	{r7}
 8003226:	b08b      	sub	sp, #44	; 0x2c
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800322e:	2300      	movs	r3, #0
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003232:	2300      	movs	r3, #0
 8003234:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003236:	e169      	b.n	800350c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003238:	2201      	movs	r2, #1
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	429a      	cmp	r2, r3
 8003252:	f040 8158 	bne.w	8003506 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4a9a      	ldr	r2, [pc, #616]	; (80034c4 <HAL_GPIO_Init+0x2a0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d05e      	beq.n	800331e <HAL_GPIO_Init+0xfa>
 8003260:	4a98      	ldr	r2, [pc, #608]	; (80034c4 <HAL_GPIO_Init+0x2a0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d875      	bhi.n	8003352 <HAL_GPIO_Init+0x12e>
 8003266:	4a98      	ldr	r2, [pc, #608]	; (80034c8 <HAL_GPIO_Init+0x2a4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d058      	beq.n	800331e <HAL_GPIO_Init+0xfa>
 800326c:	4a96      	ldr	r2, [pc, #600]	; (80034c8 <HAL_GPIO_Init+0x2a4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d86f      	bhi.n	8003352 <HAL_GPIO_Init+0x12e>
 8003272:	4a96      	ldr	r2, [pc, #600]	; (80034cc <HAL_GPIO_Init+0x2a8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d052      	beq.n	800331e <HAL_GPIO_Init+0xfa>
 8003278:	4a94      	ldr	r2, [pc, #592]	; (80034cc <HAL_GPIO_Init+0x2a8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d869      	bhi.n	8003352 <HAL_GPIO_Init+0x12e>
 800327e:	4a94      	ldr	r2, [pc, #592]	; (80034d0 <HAL_GPIO_Init+0x2ac>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d04c      	beq.n	800331e <HAL_GPIO_Init+0xfa>
 8003284:	4a92      	ldr	r2, [pc, #584]	; (80034d0 <HAL_GPIO_Init+0x2ac>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d863      	bhi.n	8003352 <HAL_GPIO_Init+0x12e>
 800328a:	4a92      	ldr	r2, [pc, #584]	; (80034d4 <HAL_GPIO_Init+0x2b0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d046      	beq.n	800331e <HAL_GPIO_Init+0xfa>
 8003290:	4a90      	ldr	r2, [pc, #576]	; (80034d4 <HAL_GPIO_Init+0x2b0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d85d      	bhi.n	8003352 <HAL_GPIO_Init+0x12e>
 8003296:	2b12      	cmp	r3, #18
 8003298:	d82a      	bhi.n	80032f0 <HAL_GPIO_Init+0xcc>
 800329a:	2b12      	cmp	r3, #18
 800329c:	d859      	bhi.n	8003352 <HAL_GPIO_Init+0x12e>
 800329e:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <HAL_GPIO_Init+0x80>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	0800331f 	.word	0x0800331f
 80032a8:	080032f9 	.word	0x080032f9
 80032ac:	0800330b 	.word	0x0800330b
 80032b0:	0800334d 	.word	0x0800334d
 80032b4:	08003353 	.word	0x08003353
 80032b8:	08003353 	.word	0x08003353
 80032bc:	08003353 	.word	0x08003353
 80032c0:	08003353 	.word	0x08003353
 80032c4:	08003353 	.word	0x08003353
 80032c8:	08003353 	.word	0x08003353
 80032cc:	08003353 	.word	0x08003353
 80032d0:	08003353 	.word	0x08003353
 80032d4:	08003353 	.word	0x08003353
 80032d8:	08003353 	.word	0x08003353
 80032dc:	08003353 	.word	0x08003353
 80032e0:	08003353 	.word	0x08003353
 80032e4:	08003353 	.word	0x08003353
 80032e8:	08003301 	.word	0x08003301
 80032ec:	08003315 	.word	0x08003315
 80032f0:	4a79      	ldr	r2, [pc, #484]	; (80034d8 <HAL_GPIO_Init+0x2b4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032f6:	e02c      	b.n	8003352 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	623b      	str	r3, [r7, #32]
          break;
 80032fe:	e029      	b.n	8003354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	3304      	adds	r3, #4
 8003306:	623b      	str	r3, [r7, #32]
          break;
 8003308:	e024      	b.n	8003354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	3308      	adds	r3, #8
 8003310:	623b      	str	r3, [r7, #32]
          break;
 8003312:	e01f      	b.n	8003354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	330c      	adds	r3, #12
 800331a:	623b      	str	r3, [r7, #32]
          break;
 800331c:	e01a      	b.n	8003354 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d102      	bne.n	800332c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003326:	2304      	movs	r3, #4
 8003328:	623b      	str	r3, [r7, #32]
          break;
 800332a:	e013      	b.n	8003354 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003334:	2308      	movs	r3, #8
 8003336:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	611a      	str	r2, [r3, #16]
          break;
 800333e:	e009      	b.n	8003354 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003340:	2308      	movs	r3, #8
 8003342:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	615a      	str	r2, [r3, #20]
          break;
 800334a:	e003      	b.n	8003354 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800334c:	2300      	movs	r3, #0
 800334e:	623b      	str	r3, [r7, #32]
          break;
 8003350:	e000      	b.n	8003354 <HAL_GPIO_Init+0x130>
          break;
 8003352:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2bff      	cmp	r3, #255	; 0xff
 8003358:	d801      	bhi.n	800335e <HAL_GPIO_Init+0x13a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	e001      	b.n	8003362 <HAL_GPIO_Init+0x13e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3304      	adds	r3, #4
 8003362:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2bff      	cmp	r3, #255	; 0xff
 8003368:	d802      	bhi.n	8003370 <HAL_GPIO_Init+0x14c>
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	e002      	b.n	8003376 <HAL_GPIO_Init+0x152>
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	3b08      	subs	r3, #8
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	210f      	movs	r1, #15
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	401a      	ands	r2, r3
 8003388:	6a39      	ldr	r1, [r7, #32]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	fa01 f303 	lsl.w	r3, r1, r3
 8003390:	431a      	orrs	r2, r3
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80b1 	beq.w	8003506 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033a4:	4b4d      	ldr	r3, [pc, #308]	; (80034dc <HAL_GPIO_Init+0x2b8>)
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	4a4c      	ldr	r2, [pc, #304]	; (80034dc <HAL_GPIO_Init+0x2b8>)
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	6193      	str	r3, [r2, #24]
 80033b0:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <HAL_GPIO_Init+0x2b8>)
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033bc:	4a48      	ldr	r2, [pc, #288]	; (80034e0 <HAL_GPIO_Init+0x2bc>)
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	089b      	lsrs	r3, r3, #2
 80033c2:	3302      	adds	r3, #2
 80033c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	220f      	movs	r2, #15
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4013      	ands	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a40      	ldr	r2, [pc, #256]	; (80034e4 <HAL_GPIO_Init+0x2c0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d013      	beq.n	8003410 <HAL_GPIO_Init+0x1ec>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3f      	ldr	r2, [pc, #252]	; (80034e8 <HAL_GPIO_Init+0x2c4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00d      	beq.n	800340c <HAL_GPIO_Init+0x1e8>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a3e      	ldr	r2, [pc, #248]	; (80034ec <HAL_GPIO_Init+0x2c8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d007      	beq.n	8003408 <HAL_GPIO_Init+0x1e4>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a3d      	ldr	r2, [pc, #244]	; (80034f0 <HAL_GPIO_Init+0x2cc>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d101      	bne.n	8003404 <HAL_GPIO_Init+0x1e0>
 8003400:	2303      	movs	r3, #3
 8003402:	e006      	b.n	8003412 <HAL_GPIO_Init+0x1ee>
 8003404:	2304      	movs	r3, #4
 8003406:	e004      	b.n	8003412 <HAL_GPIO_Init+0x1ee>
 8003408:	2302      	movs	r3, #2
 800340a:	e002      	b.n	8003412 <HAL_GPIO_Init+0x1ee>
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <HAL_GPIO_Init+0x1ee>
 8003410:	2300      	movs	r3, #0
 8003412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003414:	f002 0203 	and.w	r2, r2, #3
 8003418:	0092      	lsls	r2, r2, #2
 800341a:	4093      	lsls	r3, r2
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003422:	492f      	ldr	r1, [pc, #188]	; (80034e0 <HAL_GPIO_Init+0x2bc>)
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	089b      	lsrs	r3, r3, #2
 8003428:	3302      	adds	r3, #2
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d006      	beq.n	800344a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800343c:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	492c      	ldr	r1, [pc, #176]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	608b      	str	r3, [r1, #8]
 8003448:	e006      	b.n	8003458 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800344a:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	43db      	mvns	r3, r3
 8003452:	4928      	ldr	r1, [pc, #160]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 8003454:	4013      	ands	r3, r2
 8003456:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d006      	beq.n	8003472 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003464:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	4922      	ldr	r1, [pc, #136]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	4313      	orrs	r3, r2
 800346e:	60cb      	str	r3, [r1, #12]
 8003470:	e006      	b.n	8003480 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	43db      	mvns	r3, r3
 800347a:	491e      	ldr	r1, [pc, #120]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 800347c:	4013      	ands	r3, r2
 800347e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d006      	beq.n	800349a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800348c:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	4918      	ldr	r1, [pc, #96]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
 8003498:	e006      	b.n	80034a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800349a:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	43db      	mvns	r3, r3
 80034a2:	4914      	ldr	r1, [pc, #80]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d021      	beq.n	80034f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034b4:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	490e      	ldr	r1, [pc, #56]	; (80034f4 <HAL_GPIO_Init+0x2d0>)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	4313      	orrs	r3, r2
 80034be:	600b      	str	r3, [r1, #0]
 80034c0:	e021      	b.n	8003506 <HAL_GPIO_Init+0x2e2>
 80034c2:	bf00      	nop
 80034c4:	10320000 	.word	0x10320000
 80034c8:	10310000 	.word	0x10310000
 80034cc:	10220000 	.word	0x10220000
 80034d0:	10210000 	.word	0x10210000
 80034d4:	10120000 	.word	0x10120000
 80034d8:	10110000 	.word	0x10110000
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40010000 	.word	0x40010000
 80034e4:	40010800 	.word	0x40010800
 80034e8:	40010c00 	.word	0x40010c00
 80034ec:	40011000 	.word	0x40011000
 80034f0:	40011400 	.word	0x40011400
 80034f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_GPIO_Init+0x304>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	43db      	mvns	r3, r3
 8003500:	4909      	ldr	r1, [pc, #36]	; (8003528 <HAL_GPIO_Init+0x304>)
 8003502:	4013      	ands	r3, r2
 8003504:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	3301      	adds	r3, #1
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	fa22 f303 	lsr.w	r3, r2, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	f47f ae8e 	bne.w	8003238 <HAL_GPIO_Init+0x14>
  }
}
 800351c:	bf00      	nop
 800351e:	bf00      	nop
 8003520:	372c      	adds	r7, #44	; 0x2c
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	40010400 	.word	0x40010400

0800352c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	807b      	strh	r3, [r7, #2]
 8003538:	4613      	mov	r3, r2
 800353a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800353c:	787b      	ldrb	r3, [r7, #1]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003542:	887a      	ldrh	r2, [r7, #2]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003548:	e003      	b.n	8003552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800354a:	887b      	ldrh	r3, [r7, #2]
 800354c:	041a      	lsls	r2, r3, #16
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	611a      	str	r2, [r3, #16]
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800356e:	887a      	ldrh	r2, [r7, #2]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4013      	ands	r3, r2
 8003574:	041a      	lsls	r2, r3, #16
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	43d9      	mvns	r1, r3
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	400b      	ands	r3, r1
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	611a      	str	r2, [r3, #16]
}
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr
	...

08003590 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e12b      	b.n	80037fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fe ff6e 	bl	8002498 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2224      	movs	r2, #36	; 0x24
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035f4:	f001 ff1a 	bl	800542c <HAL_RCC_GetPCLK1Freq>
 80035f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4a81      	ldr	r2, [pc, #516]	; (8003804 <HAL_I2C_Init+0x274>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d807      	bhi.n	8003614 <HAL_I2C_Init+0x84>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4a80      	ldr	r2, [pc, #512]	; (8003808 <HAL_I2C_Init+0x278>)
 8003608:	4293      	cmp	r3, r2
 800360a:	bf94      	ite	ls
 800360c:	2301      	movls	r3, #1
 800360e:	2300      	movhi	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	e006      	b.n	8003622 <HAL_I2C_Init+0x92>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4a7d      	ldr	r2, [pc, #500]	; (800380c <HAL_I2C_Init+0x27c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	bf94      	ite	ls
 800361c:	2301      	movls	r3, #1
 800361e:	2300      	movhi	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e0e7      	b.n	80037fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4a78      	ldr	r2, [pc, #480]	; (8003810 <HAL_I2C_Init+0x280>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	0c9b      	lsrs	r3, r3, #18
 8003634:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a6a      	ldr	r2, [pc, #424]	; (8003804 <HAL_I2C_Init+0x274>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d802      	bhi.n	8003664 <HAL_I2C_Init+0xd4>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	3301      	adds	r3, #1
 8003662:	e009      	b.n	8003678 <HAL_I2C_Init+0xe8>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	4a69      	ldr	r2, [pc, #420]	; (8003814 <HAL_I2C_Init+0x284>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	099b      	lsrs	r3, r3, #6
 8003676:	3301      	adds	r3, #1
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	430b      	orrs	r3, r1
 800367e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800368a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	495c      	ldr	r1, [pc, #368]	; (8003804 <HAL_I2C_Init+0x274>)
 8003694:	428b      	cmp	r3, r1
 8003696:	d819      	bhi.n	80036cc <HAL_I2C_Init+0x13c>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1e59      	subs	r1, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80036a6:	1c59      	adds	r1, r3, #1
 80036a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036ac:	400b      	ands	r3, r1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_I2C_Init+0x138>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1e59      	subs	r1, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80036c0:	3301      	adds	r3, #1
 80036c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c6:	e051      	b.n	800376c <HAL_I2C_Init+0x1dc>
 80036c8:	2304      	movs	r3, #4
 80036ca:	e04f      	b.n	800376c <HAL_I2C_Init+0x1dc>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d111      	bne.n	80036f8 <HAL_I2C_Init+0x168>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1e58      	subs	r0, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	440b      	add	r3, r1
 80036e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e6:	3301      	adds	r3, #1
 80036e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	e012      	b.n	800371e <HAL_I2C_Init+0x18e>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e58      	subs	r0, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	0099      	lsls	r1, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	fbb0 f3f3 	udiv	r3, r0, r3
 800370e:	3301      	adds	r3, #1
 8003710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_I2C_Init+0x196>
 8003722:	2301      	movs	r3, #1
 8003724:	e022      	b.n	800376c <HAL_I2C_Init+0x1dc>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10e      	bne.n	800374c <HAL_I2C_Init+0x1bc>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1e58      	subs	r0, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6859      	ldr	r1, [r3, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	440b      	add	r3, r1
 800373c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003740:	3301      	adds	r3, #1
 8003742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800374a:	e00f      	b.n	800376c <HAL_I2C_Init+0x1dc>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1e58      	subs	r0, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	0099      	lsls	r1, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003762:	3301      	adds	r3, #1
 8003764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003768:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	6809      	ldr	r1, [r1, #0]
 8003770:	4313      	orrs	r3, r2
 8003772:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800379a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6911      	ldr	r1, [r2, #16]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68d2      	ldr	r2, [r2, #12]
 80037a6:	4311      	orrs	r1, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	000186a0 	.word	0x000186a0
 8003808:	001e847f 	.word	0x001e847f
 800380c:	003d08ff 	.word	0x003d08ff
 8003810:	431bde83 	.word	0x431bde83
 8003814:	10624dd3 	.word	0x10624dd3

08003818 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	461a      	mov	r2, r3
 8003824:	460b      	mov	r3, r1
 8003826:	817b      	strh	r3, [r7, #10]
 8003828:	4613      	mov	r3, r2
 800382a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800382c:	f7ff fbbe 	bl	8002fac <HAL_GetTick>
 8003830:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b20      	cmp	r3, #32
 800383c:	f040 80e0 	bne.w	8003a00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	2319      	movs	r3, #25
 8003846:	2201      	movs	r2, #1
 8003848:	4970      	ldr	r1, [pc, #448]	; (8003a0c <HAL_I2C_Master_Transmit+0x1f4>)
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 ffee 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003856:	2302      	movs	r3, #2
 8003858:	e0d3      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_I2C_Master_Transmit+0x50>
 8003864:	2302      	movs	r3, #2
 8003866:	e0cc      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b01      	cmp	r3, #1
 800387c:	d007      	beq.n	800388e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0201 	orr.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800389c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2221      	movs	r2, #33	; 0x21
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2210      	movs	r2, #16
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	893a      	ldrh	r2, [r7, #8]
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4a50      	ldr	r2, [pc, #320]	; (8003a10 <HAL_I2C_Master_Transmit+0x1f8>)
 80038ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038d0:	8979      	ldrh	r1, [r7, #10]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	6a3a      	ldr	r2, [r7, #32]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fd70 	bl	80043bc <I2C_MasterRequestWrite>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e08d      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038fc:	e066      	b.n	80039cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	6a39      	ldr	r1, [r7, #32]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f001 f8ac 	bl	8004a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00d      	beq.n	800392a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	2b04      	cmp	r3, #4
 8003914:	d107      	bne.n	8003926 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003924:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e06b      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	781a      	ldrb	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b04      	cmp	r3, #4
 8003966:	d11b      	bne.n	80039a0 <HAL_I2C_Master_Transmit+0x188>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396c:	2b00      	cmp	r3, #0
 800396e:	d017      	beq.n	80039a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	781a      	ldrb	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	6a39      	ldr	r1, [r7, #32]
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f001 f8a3 	bl	8004af0 <I2C_WaitOnBTFFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d107      	bne.n	80039c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e01a      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d194      	bne.n	80038fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e000      	b.n	8003a02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
  }
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	00100002 	.word	0x00100002
 8003a10:	ffff0000 	.word	0xffff0000

08003a14 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08c      	sub	sp, #48	; 0x30
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	607a      	str	r2, [r7, #4]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	460b      	mov	r3, r1
 8003a22:	817b      	strh	r3, [r7, #10]
 8003a24:	4613      	mov	r3, r2
 8003a26:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a2c:	f7ff fabe 	bl	8002fac <HAL_GetTick>
 8003a30:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	f040 824b 	bne.w	8003ed6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2319      	movs	r3, #25
 8003a46:	2201      	movs	r2, #1
 8003a48:	497f      	ldr	r1, [pc, #508]	; (8003c48 <HAL_I2C_Master_Receive+0x234>)
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 feee 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003a56:	2302      	movs	r3, #2
 8003a58:	e23e      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_I2C_Master_Receive+0x54>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e237      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d007      	beq.n	8003a8e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2222      	movs	r2, #34	; 0x22
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	893a      	ldrh	r2, [r7, #8]
 8003abe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a5f      	ldr	r2, [pc, #380]	; (8003c4c <HAL_I2C_Master_Receive+0x238>)
 8003ace:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ad0:	8979      	ldrh	r1, [r7, #10]
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fcf2 	bl	80044c0 <I2C_MasterRequestRead>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e1f8      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d113      	bne.n	8003b16 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	e1cc      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d11e      	bne.n	8003b5c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b2e:	b672      	cpsid	i
}
 8003b30:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b32:	2300      	movs	r3, #0
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b58:	b662      	cpsie	i
}
 8003b5a:	e035      	b.n	8003bc8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d11e      	bne.n	8003ba2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b74:	b672      	cpsid	i
}
 8003b76:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b9e:	b662      	cpsie	i
}
 8003ba0:	e012      	b.n	8003bc8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003bc8:	e172      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	f200 811f 	bhi.w	8003e12 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d123      	bne.n	8003c24 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 ffcd 	bl	8004b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e173      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c22:	e145      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d152      	bne.n	8003cd2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	2200      	movs	r2, #0
 8003c34:	4906      	ldr	r1, [pc, #24]	; (8003c50 <HAL_I2C_Master_Receive+0x23c>)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fdf8 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e148      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
 8003c46:	bf00      	nop
 8003c48:	00100002 	.word	0x00100002
 8003c4c:	ffff0000 	.word	0xffff0000
 8003c50:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c54:	b672      	cpsid	i
}
 8003c56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c9a:	b662      	cpsie	i
}
 8003c9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cd0:	e0ee      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	2200      	movs	r2, #0
 8003cda:	4981      	ldr	r1, [pc, #516]	; (8003ee0 <HAL_I2C_Master_Receive+0x4cc>)
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fda5 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0f5      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003cfc:	b672      	cpsid	i
}
 8003cfe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d32:	4b6c      	ldr	r3, [pc, #432]	; (8003ee4 <HAL_I2C_Master_Receive+0x4d0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	08db      	lsrs	r3, r3, #3
 8003d38:	4a6b      	ldr	r2, [pc, #428]	; (8003ee8 <HAL_I2C_Master_Receive+0x4d4>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	0a1a      	lsrs	r2, r3, #8
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	00da      	lsls	r2, r3, #3
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d118      	bne.n	8003d8a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f043 0220 	orr.w	r2, r3, #32
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003d7a:	b662      	cpsie	i
}
 8003d7c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e0a6      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d1d9      	bne.n	8003d4c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003dda:	b662      	cpsie	i
}
 8003ddc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e10:	e04e      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 feb2 	bl	8004b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e058      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d124      	bne.n	8003eb0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d107      	bne.n	8003e7e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f47f ae88 	bne.w	8003bca <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e000      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
  }
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3728      	adds	r7, #40	; 0x28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	00010004 	.word	0x00010004
 8003ee4:	20000020 	.word	0x20000020
 8003ee8:	14f8b589 	.word	0x14f8b589

08003eec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08c      	sub	sp, #48	; 0x30
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	4608      	mov	r0, r1
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	817b      	strh	r3, [r7, #10]
 8003efe:	460b      	mov	r3, r1
 8003f00:	813b      	strh	r3, [r7, #8]
 8003f02:	4613      	mov	r3, r2
 8003f04:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f0a:	f7ff f84f 	bl	8002fac <HAL_GetTick>
 8003f0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	f040 8244 	bne.w	80043a6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	2319      	movs	r3, #25
 8003f24:	2201      	movs	r2, #1
 8003f26:	4982      	ldr	r1, [pc, #520]	; (8004130 <HAL_I2C_Mem_Read+0x244>)
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 fc7f 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003f34:	2302      	movs	r3, #2
 8003f36:	e237      	b.n	80043a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_I2C_Mem_Read+0x5a>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e230      	b.n	80043a8 <HAL_I2C_Mem_Read+0x4bc>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d007      	beq.n	8003f6c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2222      	movs	r2, #34	; 0x22
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2240      	movs	r2, #64	; 0x40
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4a62      	ldr	r2, [pc, #392]	; (8004134 <HAL_I2C_Mem_Read+0x248>)
 8003fac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fae:	88f8      	ldrh	r0, [r7, #6]
 8003fb0:	893a      	ldrh	r2, [r7, #8]
 8003fb2:	8979      	ldrh	r1, [r7, #10]
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fb4c 	bl	800465c <I2C_RequestMemoryRead>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e1ec      	b.n	80043a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d113      	bne.n	8003ffe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	e1c0      	b.n	8004380 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004002:	2b01      	cmp	r3, #1
 8004004:	d11e      	bne.n	8004044 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004014:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004016:	b672      	cpsid	i
}
 8004018:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401a:	2300      	movs	r3, #0
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004040:	b662      	cpsie	i
}
 8004042:	e035      	b.n	80040b0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004048:	2b02      	cmp	r3, #2
 800404a:	d11e      	bne.n	800408a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800405a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800405c:	b672      	cpsid	i
}
 800405e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004084:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004086:	b662      	cpsie	i
}
 8004088:	e012      	b.n	80040b0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004098:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409a:	2300      	movs	r3, #0
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80040b0:	e166      	b.n	8004380 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	f200 811f 	bhi.w	80042fa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d123      	bne.n	800410c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 fd59 	bl	8004b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e167      	b.n	80043a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	855a      	strh	r2, [r3, #42]	; 0x2a
 800410a:	e139      	b.n	8004380 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004110:	2b02      	cmp	r3, #2
 8004112:	d152      	bne.n	80041ba <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411a:	2200      	movs	r2, #0
 800411c:	4906      	ldr	r1, [pc, #24]	; (8004138 <HAL_I2C_Mem_Read+0x24c>)
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fb84 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e13c      	b.n	80043a8 <HAL_I2C_Mem_Read+0x4bc>
 800412e:	bf00      	nop
 8004130:	00100002 	.word	0x00100002
 8004134:	ffff0000 	.word	0xffff0000
 8004138:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800413c:	b672      	cpsid	i
}
 800413e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004182:	b662      	cpsie	i
}
 8004184:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041b8:	e0e2      	b.n	8004380 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c0:	2200      	movs	r2, #0
 80041c2:	497b      	ldr	r1, [pc, #492]	; (80043b0 <HAL_I2C_Mem_Read+0x4c4>)
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fb31 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0e9      	b.n	80043a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041e4:	b672      	cpsid	i
}
 80041e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800421a:	4b66      	ldr	r3, [pc, #408]	; (80043b4 <HAL_I2C_Mem_Read+0x4c8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	08db      	lsrs	r3, r3, #3
 8004220:	4a65      	ldr	r2, [pc, #404]	; (80043b8 <HAL_I2C_Mem_Read+0x4cc>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	0a1a      	lsrs	r2, r3, #8
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	00da      	lsls	r2, r3, #3
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	3b01      	subs	r3, #1
 8004238:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d118      	bne.n	8004272 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f043 0220 	orr.w	r2, r3, #32
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004262:	b662      	cpsie	i
}
 8004264:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e09a      	b.n	80043a8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b04      	cmp	r3, #4
 800427e:	d1d9      	bne.n	8004234 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800428e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691a      	ldr	r2, [r3, #16]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042c2:	b662      	cpsie	i
}
 80042c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042f8:	e042      	b.n	8004380 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 fc3e 	bl	8004b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e04c      	b.n	80043a8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b04      	cmp	r3, #4
 800434c:	d118      	bne.n	8004380 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004384:	2b00      	cmp	r3, #0
 8004386:	f47f ae94 	bne.w	80040b2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e000      	b.n	80043a8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80043a6:	2302      	movs	r3, #2
  }
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3728      	adds	r7, #40	; 0x28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	00010004 	.word	0x00010004
 80043b4:	20000020 	.word	0x20000020
 80043b8:	14f8b589 	.word	0x14f8b589

080043bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	607a      	str	r2, [r7, #4]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	460b      	mov	r3, r1
 80043ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d006      	beq.n	80043e6 <I2C_MasterRequestWrite+0x2a>
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d003      	beq.n	80043e6 <I2C_MasterRequestWrite+0x2a>
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043e4:	d108      	bne.n	80043f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	e00b      	b.n	8004410 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	2b12      	cmp	r3, #18
 80043fe:	d107      	bne.n	8004410 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800440e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fa05 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00d      	beq.n	8004444 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004436:	d103      	bne.n	8004440 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800443e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e035      	b.n	80044b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800444c:	d108      	bne.n	8004460 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800444e:	897b      	ldrh	r3, [r7, #10]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800445c:	611a      	str	r2, [r3, #16]
 800445e:	e01b      	b.n	8004498 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004460:	897b      	ldrh	r3, [r7, #10]
 8004462:	11db      	asrs	r3, r3, #7
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f003 0306 	and.w	r3, r3, #6
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f063 030f 	orn	r3, r3, #15
 8004470:	b2da      	uxtb	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	490e      	ldr	r1, [pc, #56]	; (80044b8 <I2C_MasterRequestWrite+0xfc>)
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 fa4e 	bl	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e010      	b.n	80044b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800448e:	897b      	ldrh	r3, [r7, #10]
 8004490:	b2da      	uxtb	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	4907      	ldr	r1, [pc, #28]	; (80044bc <I2C_MasterRequestWrite+0x100>)
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fa3e 	bl	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	00010008 	.word	0x00010008
 80044bc:	00010002 	.word	0x00010002

080044c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	460b      	mov	r3, r1
 80044ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d006      	beq.n	80044fa <I2C_MasterRequestRead+0x3a>
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d003      	beq.n	80044fa <I2C_MasterRequestRead+0x3a>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044f8:	d108      	bne.n	800450c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	e00b      	b.n	8004524 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	2b11      	cmp	r3, #17
 8004512:	d107      	bne.n	8004524 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004522:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f97b 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00d      	beq.n	8004558 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800454a:	d103      	bne.n	8004554 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004552:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e079      	b.n	800464c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004560:	d108      	bne.n	8004574 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004562:	897b      	ldrh	r3, [r7, #10]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	b2da      	uxtb	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	611a      	str	r2, [r3, #16]
 8004572:	e05f      	b.n	8004634 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004574:	897b      	ldrh	r3, [r7, #10]
 8004576:	11db      	asrs	r3, r3, #7
 8004578:	b2db      	uxtb	r3, r3
 800457a:	f003 0306 	and.w	r3, r3, #6
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f063 030f 	orn	r3, r3, #15
 8004584:	b2da      	uxtb	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	4930      	ldr	r1, [pc, #192]	; (8004654 <I2C_MasterRequestRead+0x194>)
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f9c4 	bl	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e054      	b.n	800464c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045a2:	897b      	ldrh	r3, [r7, #10]
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	4929      	ldr	r1, [pc, #164]	; (8004658 <I2C_MasterRequestRead+0x198>)
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f9b4 	bl	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e044      	b.n	800464c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c2:	2300      	movs	r3, #0
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f919 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00d      	beq.n	800461c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800460e:	d103      	bne.n	8004618 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004616:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e017      	b.n	800464c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800461c:	897b      	ldrh	r3, [r7, #10]
 800461e:	11db      	asrs	r3, r3, #7
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f003 0306 	and.w	r3, r3, #6
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f063 030e 	orn	r3, r3, #14
 800462c:	b2da      	uxtb	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	4907      	ldr	r1, [pc, #28]	; (8004658 <I2C_MasterRequestRead+0x198>)
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 f970 	bl	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	00010008 	.word	0x00010008
 8004658:	00010002 	.word	0x00010002

0800465c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af02      	add	r7, sp, #8
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	4608      	mov	r0, r1
 8004666:	4611      	mov	r1, r2
 8004668:	461a      	mov	r2, r3
 800466a:	4603      	mov	r3, r0
 800466c:	817b      	strh	r3, [r7, #10]
 800466e:	460b      	mov	r3, r1
 8004670:	813b      	strh	r3, [r7, #8]
 8004672:	4613      	mov	r3, r2
 8004674:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004684:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004694:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	2200      	movs	r2, #0
 800469e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 f8c2 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00d      	beq.n	80046ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046bc:	d103      	bne.n	80046c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e0aa      	b.n	8004820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046ca:	897b      	ldrh	r3, [r7, #10]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	6a3a      	ldr	r2, [r7, #32]
 80046de:	4952      	ldr	r1, [pc, #328]	; (8004828 <I2C_RequestMemoryRead+0x1cc>)
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f91d 	bl	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e097      	b.n	8004820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004708:	6a39      	ldr	r1, [r7, #32]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 f9a8 	bl	8004a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00d      	beq.n	8004732 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	2b04      	cmp	r3, #4
 800471c:	d107      	bne.n	800472e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e076      	b.n	8004820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d105      	bne.n	8004744 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004738:	893b      	ldrh	r3, [r7, #8]
 800473a:	b2da      	uxtb	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	611a      	str	r2, [r3, #16]
 8004742:	e021      	b.n	8004788 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004744:	893b      	ldrh	r3, [r7, #8]
 8004746:	0a1b      	lsrs	r3, r3, #8
 8004748:	b29b      	uxth	r3, r3
 800474a:	b2da      	uxtb	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004754:	6a39      	ldr	r1, [r7, #32]
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 f982 	bl	8004a60 <I2C_WaitOnTXEFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00d      	beq.n	800477e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	2b04      	cmp	r3, #4
 8004768:	d107      	bne.n	800477a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004778:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e050      	b.n	8004820 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800477e:	893b      	ldrh	r3, [r7, #8]
 8004780:	b2da      	uxtb	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478a:	6a39      	ldr	r1, [r7, #32]
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f967 	bl	8004a60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00d      	beq.n	80047b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	2b04      	cmp	r3, #4
 800479e:	d107      	bne.n	80047b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e035      	b.n	8004820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f82b 	bl	800482c <I2C_WaitOnFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00d      	beq.n	80047f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ea:	d103      	bne.n	80047f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e013      	b.n	8004820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047f8:	897b      	ldrh	r3, [r7, #10]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	b2da      	uxtb	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	6a3a      	ldr	r2, [r7, #32]
 800480c:	4906      	ldr	r1, [pc, #24]	; (8004828 <I2C_RequestMemoryRead+0x1cc>)
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f886 	bl	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	00010002 	.word	0x00010002

0800482c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800483c:	e048      	b.n	80048d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004844:	d044      	beq.n	80048d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004846:	f7fe fbb1 	bl	8002fac <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d302      	bcc.n	800485c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d139      	bne.n	80048d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	0c1b      	lsrs	r3, r3, #16
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b01      	cmp	r3, #1
 8004864:	d10d      	bne.n	8004882 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	43da      	mvns	r2, r3
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4013      	ands	r3, r2
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	bf0c      	ite	eq
 8004878:	2301      	moveq	r3, #1
 800487a:	2300      	movne	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	461a      	mov	r2, r3
 8004880:	e00c      	b.n	800489c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	43da      	mvns	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4013      	ands	r3, r2
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	bf0c      	ite	eq
 8004894:	2301      	moveq	r3, #1
 8004896:	2300      	movne	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d116      	bne.n	80048d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	f043 0220 	orr.w	r2, r3, #32
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e023      	b.n	8004918 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	0c1b      	lsrs	r3, r3, #16
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d10d      	bne.n	80048f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	43da      	mvns	r2, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4013      	ands	r3, r2
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	bf0c      	ite	eq
 80048ec:	2301      	moveq	r3, #1
 80048ee:	2300      	movne	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	e00c      	b.n	8004910 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	43da      	mvns	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4013      	ands	r3, r2
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf0c      	ite	eq
 8004908:	2301      	moveq	r3, #1
 800490a:	2300      	movne	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	429a      	cmp	r2, r3
 8004914:	d093      	beq.n	800483e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800492e:	e071      	b.n	8004a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800493a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800493e:	d123      	bne.n	8004988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800494e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004958:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	f043 0204 	orr.w	r2, r3, #4
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e067      	b.n	8004a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d041      	beq.n	8004a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004990:	f7fe fb0c 	bl	8002fac <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	d302      	bcc.n	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d136      	bne.n	8004a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d10c      	bne.n	80049ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	43da      	mvns	r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4013      	ands	r3, r2
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	bf14      	ite	ne
 80049c2:	2301      	movne	r3, #1
 80049c4:	2300      	moveq	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	e00b      	b.n	80049e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	43da      	mvns	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4013      	ands	r3, r2
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	f043 0220 	orr.w	r2, r3, #32
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e021      	b.n	8004a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	0c1b      	lsrs	r3, r3, #16
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d10c      	bne.n	8004a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	43da      	mvns	r2, r3
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	bf14      	ite	ne
 8004a30:	2301      	movne	r3, #1
 8004a32:	2300      	moveq	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	e00b      	b.n	8004a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	43da      	mvns	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4013      	ands	r3, r2
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	bf14      	ite	ne
 8004a4a:	2301      	movne	r3, #1
 8004a4c:	2300      	moveq	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f47f af6d 	bne.w	8004930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a6c:	e034      	b.n	8004ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f8e3 	bl	8004c3a <I2C_IsAcknowledgeFailed>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e034      	b.n	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d028      	beq.n	8004ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a86:	f7fe fa91 	bl	8002fac <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d302      	bcc.n	8004a9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d11d      	bne.n	8004ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	2b80      	cmp	r3, #128	; 0x80
 8004aa8:	d016      	beq.n	8004ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	f043 0220 	orr.w	r2, r3, #32
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e007      	b.n	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d1c3      	bne.n	8004a6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004afc:	e034      	b.n	8004b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 f89b 	bl	8004c3a <I2C_IsAcknowledgeFailed>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e034      	b.n	8004b78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d028      	beq.n	8004b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b16:	f7fe fa49 	bl	8002fac <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d302      	bcc.n	8004b2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d11d      	bne.n	8004b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d016      	beq.n	8004b68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	f043 0220 	orr.w	r2, r3, #32
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e007      	b.n	8004b78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d1c3      	bne.n	8004afe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b8c:	e049      	b.n	8004c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d119      	bne.n	8004bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0210 	mvn.w	r2, #16
 8004ba4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e030      	b.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd0:	f7fe f9ec 	bl	8002fac <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d302      	bcc.n	8004be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d11d      	bne.n	8004c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d016      	beq.n	8004c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f043 0220 	orr.w	r2, r3, #32
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e007      	b.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d1ae      	bne.n	8004b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c50:	d11b      	bne.n	8004c8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0204 	orr.w	r2, r3, #4
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr
	...

08004c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e272      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8087 	beq.w	8004dc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cb8:	4b92      	ldr	r3, [pc, #584]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f003 030c 	and.w	r3, r3, #12
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d00c      	beq.n	8004cde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cc4:	4b8f      	ldr	r3, [pc, #572]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f003 030c 	and.w	r3, r3, #12
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d112      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x5e>
 8004cd0:	4b8c      	ldr	r3, [pc, #560]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cdc:	d10b      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cde:	4b89      	ldr	r3, [pc, #548]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d06c      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x12c>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d168      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e24c      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfe:	d106      	bne.n	8004d0e <HAL_RCC_OscConfig+0x76>
 8004d00:	4b80      	ldr	r3, [pc, #512]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a7f      	ldr	r2, [pc, #508]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	e02e      	b.n	8004d6c <HAL_RCC_OscConfig+0xd4>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCC_OscConfig+0x98>
 8004d16:	4b7b      	ldr	r3, [pc, #492]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a7a      	ldr	r2, [pc, #488]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	4b78      	ldr	r3, [pc, #480]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a77      	ldr	r2, [pc, #476]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	e01d      	b.n	8004d6c <HAL_RCC_OscConfig+0xd4>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCC_OscConfig+0xbc>
 8004d3a:	4b72      	ldr	r3, [pc, #456]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a71      	ldr	r2, [pc, #452]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d44:	6013      	str	r3, [r2, #0]
 8004d46:	4b6f      	ldr	r3, [pc, #444]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a6e      	ldr	r2, [pc, #440]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e00b      	b.n	8004d6c <HAL_RCC_OscConfig+0xd4>
 8004d54:	4b6b      	ldr	r3, [pc, #428]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a6a      	ldr	r2, [pc, #424]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	4b68      	ldr	r3, [pc, #416]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a67      	ldr	r2, [pc, #412]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d013      	beq.n	8004d9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d74:	f7fe f91a 	bl	8002fac <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d7c:	f7fe f916 	bl	8002fac <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b64      	cmp	r3, #100	; 0x64
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e200      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8e:	4b5d      	ldr	r3, [pc, #372]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f0      	beq.n	8004d7c <HAL_RCC_OscConfig+0xe4>
 8004d9a:	e014      	b.n	8004dc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9c:	f7fe f906 	bl	8002fac <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da4:	f7fe f902 	bl	8002fac <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b64      	cmp	r3, #100	; 0x64
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e1ec      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004db6:	4b53      	ldr	r3, [pc, #332]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f0      	bne.n	8004da4 <HAL_RCC_OscConfig+0x10c>
 8004dc2:	e000      	b.n	8004dc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d063      	beq.n	8004e9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dd2:	4b4c      	ldr	r3, [pc, #304]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00b      	beq.n	8004df6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004dde:	4b49      	ldr	r3, [pc, #292]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 030c 	and.w	r3, r3, #12
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d11c      	bne.n	8004e24 <HAL_RCC_OscConfig+0x18c>
 8004dea:	4b46      	ldr	r3, [pc, #280]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d116      	bne.n	8004e24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df6:	4b43      	ldr	r3, [pc, #268]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_RCC_OscConfig+0x176>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d001      	beq.n	8004e0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e1c0      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0e:	4b3d      	ldr	r3, [pc, #244]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	4939      	ldr	r1, [pc, #228]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e22:	e03a      	b.n	8004e9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d020      	beq.n	8004e6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e2c:	4b36      	ldr	r3, [pc, #216]	; (8004f08 <HAL_RCC_OscConfig+0x270>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e32:	f7fe f8bb 	bl	8002fac <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e3a:	f7fe f8b7 	bl	8002fac <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e1a1      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4c:	4b2d      	ldr	r3, [pc, #180]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e58:	4b2a      	ldr	r3, [pc, #168]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	4927      	ldr	r1, [pc, #156]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	600b      	str	r3, [r1, #0]
 8004e6c:	e015      	b.n	8004e9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e6e:	4b26      	ldr	r3, [pc, #152]	; (8004f08 <HAL_RCC_OscConfig+0x270>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e74:	f7fe f89a 	bl	8002fac <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e7c:	f7fe f896 	bl	8002fac <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e180      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e8e:	4b1d      	ldr	r3, [pc, #116]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f0      	bne.n	8004e7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d03a      	beq.n	8004f1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d019      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eae:	4b17      	ldr	r3, [pc, #92]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb4:	f7fe f87a 	bl	8002fac <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ebc:	f7fe f876 	bl	8002fac <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e160      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ece:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <HAL_RCC_OscConfig+0x26c>)
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004eda:	2001      	movs	r0, #1
 8004edc:	f000 face 	bl	800547c <RCC_Delay>
 8004ee0:	e01c      	b.n	8004f1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <HAL_RCC_OscConfig+0x274>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee8:	f7fe f860 	bl	8002fac <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eee:	e00f      	b.n	8004f10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef0:	f7fe f85c 	bl	8002fac <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d908      	bls.n	8004f10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e146      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000
 8004f08:	42420000 	.word	0x42420000
 8004f0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f10:	4b92      	ldr	r3, [pc, #584]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e9      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80a6 	beq.w	8005076 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f2e:	4b8b      	ldr	r3, [pc, #556]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10d      	bne.n	8004f56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f3a:	4b88      	ldr	r3, [pc, #544]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	4a87      	ldr	r2, [pc, #540]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f44:	61d3      	str	r3, [r2, #28]
 8004f46:	4b85      	ldr	r3, [pc, #532]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	60bb      	str	r3, [r7, #8]
 8004f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f52:	2301      	movs	r3, #1
 8004f54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f56:	4b82      	ldr	r3, [pc, #520]	; (8005160 <HAL_RCC_OscConfig+0x4c8>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d118      	bne.n	8004f94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f62:	4b7f      	ldr	r3, [pc, #508]	; (8005160 <HAL_RCC_OscConfig+0x4c8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a7e      	ldr	r2, [pc, #504]	; (8005160 <HAL_RCC_OscConfig+0x4c8>)
 8004f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6e:	f7fe f81d 	bl	8002fac <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f76:	f7fe f819 	bl	8002fac <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b64      	cmp	r3, #100	; 0x64
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e103      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f88:	4b75      	ldr	r3, [pc, #468]	; (8005160 <HAL_RCC_OscConfig+0x4c8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d106      	bne.n	8004faa <HAL_RCC_OscConfig+0x312>
 8004f9c:	4b6f      	ldr	r3, [pc, #444]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	4a6e      	ldr	r2, [pc, #440]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	6213      	str	r3, [r2, #32]
 8004fa8:	e02d      	b.n	8005006 <HAL_RCC_OscConfig+0x36e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10c      	bne.n	8004fcc <HAL_RCC_OscConfig+0x334>
 8004fb2:	4b6a      	ldr	r3, [pc, #424]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	4a69      	ldr	r2, [pc, #420]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	6213      	str	r3, [r2, #32]
 8004fbe:	4b67      	ldr	r3, [pc, #412]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	4a66      	ldr	r2, [pc, #408]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fc4:	f023 0304 	bic.w	r3, r3, #4
 8004fc8:	6213      	str	r3, [r2, #32]
 8004fca:	e01c      	b.n	8005006 <HAL_RCC_OscConfig+0x36e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	2b05      	cmp	r3, #5
 8004fd2:	d10c      	bne.n	8004fee <HAL_RCC_OscConfig+0x356>
 8004fd4:	4b61      	ldr	r3, [pc, #388]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	4a60      	ldr	r2, [pc, #384]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fda:	f043 0304 	orr.w	r3, r3, #4
 8004fde:	6213      	str	r3, [r2, #32]
 8004fe0:	4b5e      	ldr	r3, [pc, #376]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	4a5d      	ldr	r2, [pc, #372]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004fe6:	f043 0301 	orr.w	r3, r3, #1
 8004fea:	6213      	str	r3, [r2, #32]
 8004fec:	e00b      	b.n	8005006 <HAL_RCC_OscConfig+0x36e>
 8004fee:	4b5b      	ldr	r3, [pc, #364]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	4a5a      	ldr	r2, [pc, #360]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004ff4:	f023 0301 	bic.w	r3, r3, #1
 8004ff8:	6213      	str	r3, [r2, #32]
 8004ffa:	4b58      	ldr	r3, [pc, #352]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	4a57      	ldr	r2, [pc, #348]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8005000:	f023 0304 	bic.w	r3, r3, #4
 8005004:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d015      	beq.n	800503a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800500e:	f7fd ffcd 	bl	8002fac <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005014:	e00a      	b.n	800502c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005016:	f7fd ffc9 	bl	8002fac <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	f241 3288 	movw	r2, #5000	; 0x1388
 8005024:	4293      	cmp	r3, r2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e0b1      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502c:	4b4b      	ldr	r3, [pc, #300]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0ee      	beq.n	8005016 <HAL_RCC_OscConfig+0x37e>
 8005038:	e014      	b.n	8005064 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800503a:	f7fd ffb7 	bl	8002fac <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005040:	e00a      	b.n	8005058 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005042:	f7fd ffb3 	bl	8002fac <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005050:	4293      	cmp	r3, r2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e09b      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005058:	4b40      	ldr	r3, [pc, #256]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1ee      	bne.n	8005042 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005064:	7dfb      	ldrb	r3, [r7, #23]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d105      	bne.n	8005076 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800506a:	4b3c      	ldr	r3, [pc, #240]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	4a3b      	ldr	r2, [pc, #236]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8005070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005074:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8087 	beq.w	800518e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005080:	4b36      	ldr	r3, [pc, #216]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 030c 	and.w	r3, r3, #12
 8005088:	2b08      	cmp	r3, #8
 800508a:	d061      	beq.n	8005150 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d146      	bne.n	8005122 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005094:	4b33      	ldr	r3, [pc, #204]	; (8005164 <HAL_RCC_OscConfig+0x4cc>)
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fd ff87 	bl	8002fac <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a2:	f7fd ff83 	bl	8002fac <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e06d      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050b4:	4b29      	ldr	r3, [pc, #164]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1f0      	bne.n	80050a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c8:	d108      	bne.n	80050dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050ca:	4b24      	ldr	r3, [pc, #144]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	4921      	ldr	r1, [pc, #132]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050dc:	4b1f      	ldr	r3, [pc, #124]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a19      	ldr	r1, [r3, #32]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	430b      	orrs	r3, r1
 80050ee:	491b      	ldr	r1, [pc, #108]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050f4:	4b1b      	ldr	r3, [pc, #108]	; (8005164 <HAL_RCC_OscConfig+0x4cc>)
 80050f6:	2201      	movs	r2, #1
 80050f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fa:	f7fd ff57 	bl	8002fac <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005102:	f7fd ff53 	bl	8002fac <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e03d      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005114:	4b11      	ldr	r3, [pc, #68]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x46a>
 8005120:	e035      	b.n	800518e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005122:	4b10      	ldr	r3, [pc, #64]	; (8005164 <HAL_RCC_OscConfig+0x4cc>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005128:	f7fd ff40 	bl	8002fac <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005130:	f7fd ff3c 	bl	8002fac <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e026      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <HAL_RCC_OscConfig+0x4c4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f0      	bne.n	8005130 <HAL_RCC_OscConfig+0x498>
 800514e:	e01e      	b.n	800518e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d107      	bne.n	8005168 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e019      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
 800515c:	40021000 	.word	0x40021000
 8005160:	40007000 	.word	0x40007000
 8005164:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <HAL_RCC_OscConfig+0x500>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	429a      	cmp	r2, r3
 800517a:	d106      	bne.n	800518a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d001      	beq.n	800518e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40021000 	.word	0x40021000

0800519c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0d0      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051b0:	4b6a      	ldr	r3, [pc, #424]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d910      	bls.n	80051e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b67      	ldr	r3, [pc, #412]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 0207 	bic.w	r2, r3, #7
 80051c6:	4965      	ldr	r1, [pc, #404]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ce:	4b63      	ldr	r3, [pc, #396]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d001      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0b8      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d020      	beq.n	800522e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051f8:	4b59      	ldr	r3, [pc, #356]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	4a58      	ldr	r2, [pc, #352]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 80051fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005202:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b00      	cmp	r3, #0
 800520e:	d005      	beq.n	800521c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005210:	4b53      	ldr	r3, [pc, #332]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	4a52      	ldr	r2, [pc, #328]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005216:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800521a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800521c:	4b50      	ldr	r3, [pc, #320]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	494d      	ldr	r1, [pc, #308]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800522a:	4313      	orrs	r3, r2
 800522c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d040      	beq.n	80052bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d107      	bne.n	8005252 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005242:	4b47      	ldr	r3, [pc, #284]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d115      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e07f      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d107      	bne.n	800526a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525a:	4b41      	ldr	r3, [pc, #260]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e073      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800526a:	4b3d      	ldr	r3, [pc, #244]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e06b      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800527a:	4b39      	ldr	r3, [pc, #228]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f023 0203 	bic.w	r2, r3, #3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	4936      	ldr	r1, [pc, #216]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005288:	4313      	orrs	r3, r2
 800528a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800528c:	f7fd fe8e 	bl	8002fac <HAL_GetTick>
 8005290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005292:	e00a      	b.n	80052aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005294:	f7fd fe8a 	bl	8002fac <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e053      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052aa:	4b2d      	ldr	r3, [pc, #180]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f003 020c 	and.w	r2, r3, #12
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d1eb      	bne.n	8005294 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052bc:	4b27      	ldr	r3, [pc, #156]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d210      	bcs.n	80052ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ca:	4b24      	ldr	r3, [pc, #144]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f023 0207 	bic.w	r2, r3, #7
 80052d2:	4922      	ldr	r1, [pc, #136]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052da:	4b20      	ldr	r3, [pc, #128]	; (800535c <HAL_RCC_ClockConfig+0x1c0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d001      	beq.n	80052ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e032      	b.n	8005352 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052f8:	4b19      	ldr	r3, [pc, #100]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	4916      	ldr	r1, [pc, #88]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005306:	4313      	orrs	r3, r2
 8005308:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d009      	beq.n	800532a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005316:	4b12      	ldr	r3, [pc, #72]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	490e      	ldr	r1, [pc, #56]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005326:	4313      	orrs	r3, r2
 8005328:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800532a:	f000 f821 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 800532e:	4602      	mov	r2, r0
 8005330:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <HAL_RCC_ClockConfig+0x1c4>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	091b      	lsrs	r3, r3, #4
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	490a      	ldr	r1, [pc, #40]	; (8005364 <HAL_RCC_ClockConfig+0x1c8>)
 800533c:	5ccb      	ldrb	r3, [r1, r3]
 800533e:	fa22 f303 	lsr.w	r3, r2, r3
 8005342:	4a09      	ldr	r2, [pc, #36]	; (8005368 <HAL_RCC_ClockConfig+0x1cc>)
 8005344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005346:	4b09      	ldr	r3, [pc, #36]	; (800536c <HAL_RCC_ClockConfig+0x1d0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f7fd fdec 	bl	8002f28 <HAL_InitTick>

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40022000 	.word	0x40022000
 8005360:	40021000 	.word	0x40021000
 8005364:	080067ac 	.word	0x080067ac
 8005368:	20000020 	.word	0x20000020
 800536c:	2000004c 	.word	0x2000004c

08005370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	2300      	movs	r3, #0
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	2300      	movs	r3, #0
 8005384:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800538a:	4b1e      	ldr	r3, [pc, #120]	; (8005404 <HAL_RCC_GetSysClockFreq+0x94>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b04      	cmp	r3, #4
 8005398:	d002      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0x30>
 800539a:	2b08      	cmp	r3, #8
 800539c:	d003      	beq.n	80053a6 <HAL_RCC_GetSysClockFreq+0x36>
 800539e:	e027      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053a0:	4b19      	ldr	r3, [pc, #100]	; (8005408 <HAL_RCC_GetSysClockFreq+0x98>)
 80053a2:	613b      	str	r3, [r7, #16]
      break;
 80053a4:	e027      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	0c9b      	lsrs	r3, r3, #18
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	4a17      	ldr	r2, [pc, #92]	; (800540c <HAL_RCC_GetSysClockFreq+0x9c>)
 80053b0:	5cd3      	ldrb	r3, [r2, r3]
 80053b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d010      	beq.n	80053e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053be:	4b11      	ldr	r3, [pc, #68]	; (8005404 <HAL_RCC_GetSysClockFreq+0x94>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	0c5b      	lsrs	r3, r3, #17
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	4a11      	ldr	r2, [pc, #68]	; (8005410 <HAL_RCC_GetSysClockFreq+0xa0>)
 80053ca:	5cd3      	ldrb	r3, [r2, r3]
 80053cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a0d      	ldr	r2, [pc, #52]	; (8005408 <HAL_RCC_GetSysClockFreq+0x98>)
 80053d2:	fb03 f202 	mul.w	r2, r3, r2
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	e004      	b.n	80053ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a0c      	ldr	r2, [pc, #48]	; (8005414 <HAL_RCC_GetSysClockFreq+0xa4>)
 80053e4:	fb02 f303 	mul.w	r3, r2, r3
 80053e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	613b      	str	r3, [r7, #16]
      break;
 80053ee:	e002      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053f0:	4b05      	ldr	r3, [pc, #20]	; (8005408 <HAL_RCC_GetSysClockFreq+0x98>)
 80053f2:	613b      	str	r3, [r7, #16]
      break;
 80053f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053f6:	693b      	ldr	r3, [r7, #16]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40021000 	.word	0x40021000
 8005408:	007a1200 	.word	0x007a1200
 800540c:	080067c4 	.word	0x080067c4
 8005410:	080067d4 	.word	0x080067d4
 8005414:	003d0900 	.word	0x003d0900

08005418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800541c:	4b02      	ldr	r3, [pc, #8]	; (8005428 <HAL_RCC_GetHCLKFreq+0x10>)
 800541e:	681b      	ldr	r3, [r3, #0]
}
 8005420:	4618      	mov	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr
 8005428:	20000020 	.word	0x20000020

0800542c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005430:	f7ff fff2 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 8005434:	4602      	mov	r2, r0
 8005436:	4b05      	ldr	r3, [pc, #20]	; (800544c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	0a1b      	lsrs	r3, r3, #8
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	4903      	ldr	r1, [pc, #12]	; (8005450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005442:	5ccb      	ldrb	r3, [r1, r3]
 8005444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005448:	4618      	mov	r0, r3
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40021000 	.word	0x40021000
 8005450:	080067bc 	.word	0x080067bc

08005454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005458:	f7ff ffde 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 800545c:	4602      	mov	r2, r0
 800545e:	4b05      	ldr	r3, [pc, #20]	; (8005474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	0adb      	lsrs	r3, r3, #11
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	4903      	ldr	r1, [pc, #12]	; (8005478 <HAL_RCC_GetPCLK2Freq+0x24>)
 800546a:	5ccb      	ldrb	r3, [r1, r3]
 800546c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005470:	4618      	mov	r0, r3
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40021000 	.word	0x40021000
 8005478:	080067bc 	.word	0x080067bc

0800547c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005484:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <RCC_Delay+0x34>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a0a      	ldr	r2, [pc, #40]	; (80054b4 <RCC_Delay+0x38>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	0a5b      	lsrs	r3, r3, #9
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	fb02 f303 	mul.w	r3, r2, r3
 8005496:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005498:	bf00      	nop
  }
  while (Delay --);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	1e5a      	subs	r2, r3, #1
 800549e:	60fa      	str	r2, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1f9      	bne.n	8005498 <RCC_Delay+0x1c>
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bc80      	pop	{r7}
 80054ae:	4770      	bx	lr
 80054b0:	20000020 	.word	0x20000020
 80054b4:	10624dd3 	.word	0x10624dd3

080054b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e076      	b.n	80055b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d108      	bne.n	80054e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054da:	d009      	beq.n	80054f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	61da      	str	r2, [r3, #28]
 80054e2:	e005      	b.n	80054f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fd f8ca 	bl	80026a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005526:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005574:	ea42 0103 	orr.w	r1, r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	0c1a      	lsrs	r2, r3, #16
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f002 0204 	and.w	r2, r2, #4
 8005596:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69da      	ldr	r2, [r3, #28]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e041      	b.n	8005656 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fd f9f8 	bl	80029dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f000 fc38 	bl	8005e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b01      	cmp	r3, #1
 8005672:	d001      	beq.n	8005678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e03a      	b.n	80056ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68da      	ldr	r2, [r3, #12]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <HAL_TIM_Base_Start_IT+0x98>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x58>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a2:	d009      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x58>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a14      	ldr	r2, [pc, #80]	; (80056fc <HAL_TIM_Base_Start_IT+0x9c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x58>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a13      	ldr	r2, [pc, #76]	; (8005700 <HAL_TIM_Base_Start_IT+0xa0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d111      	bne.n	80056dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b06      	cmp	r3, #6
 80056c8:	d010      	beq.n	80056ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0201 	orr.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056da:	e007      	b.n	80056ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr
 80056f8:	40012c00 	.word	0x40012c00
 80056fc:	40000400 	.word	0x40000400
 8005700:	40000800 	.word	0x40000800

08005704 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e041      	b.n	800579a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f839 	bl	80057a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3304      	adds	r3, #4
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f000 fb96 	bl	8005e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d109      	bne.n	80057d8 <HAL_TIM_PWM_Start+0x24>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	bf14      	ite	ne
 80057d0:	2301      	movne	r3, #1
 80057d2:	2300      	moveq	r3, #0
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	e022      	b.n	800581e <HAL_TIM_PWM_Start+0x6a>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d109      	bne.n	80057f2 <HAL_TIM_PWM_Start+0x3e>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	bf14      	ite	ne
 80057ea:	2301      	movne	r3, #1
 80057ec:	2300      	moveq	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	e015      	b.n	800581e <HAL_TIM_PWM_Start+0x6a>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d109      	bne.n	800580c <HAL_TIM_PWM_Start+0x58>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	bf14      	ite	ne
 8005804:	2301      	movne	r3, #1
 8005806:	2300      	moveq	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	e008      	b.n	800581e <HAL_TIM_PWM_Start+0x6a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	bf14      	ite	ne
 8005818:	2301      	movne	r3, #1
 800581a:	2300      	moveq	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e05e      	b.n	80058e4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d104      	bne.n	8005836 <HAL_TIM_PWM_Start+0x82>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005834:	e013      	b.n	800585e <HAL_TIM_PWM_Start+0xaa>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b04      	cmp	r3, #4
 800583a:	d104      	bne.n	8005846 <HAL_TIM_PWM_Start+0x92>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005844:	e00b      	b.n	800585e <HAL_TIM_PWM_Start+0xaa>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b08      	cmp	r3, #8
 800584a:	d104      	bne.n	8005856 <HAL_TIM_PWM_Start+0xa2>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005854:	e003      	b.n	800585e <HAL_TIM_PWM_Start+0xaa>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2201      	movs	r2, #1
 8005864:	6839      	ldr	r1, [r7, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fd84 	bl	8006374 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1e      	ldr	r2, [pc, #120]	; (80058ec <HAL_TIM_PWM_Start+0x138>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d107      	bne.n	8005886 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005884:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a18      	ldr	r2, [pc, #96]	; (80058ec <HAL_TIM_PWM_Start+0x138>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00e      	beq.n	80058ae <HAL_TIM_PWM_Start+0xfa>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005898:	d009      	beq.n	80058ae <HAL_TIM_PWM_Start+0xfa>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a14      	ldr	r2, [pc, #80]	; (80058f0 <HAL_TIM_PWM_Start+0x13c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d004      	beq.n	80058ae <HAL_TIM_PWM_Start+0xfa>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a12      	ldr	r2, [pc, #72]	; (80058f4 <HAL_TIM_PWM_Start+0x140>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d111      	bne.n	80058d2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b06      	cmp	r3, #6
 80058be:	d010      	beq.n	80058e2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0201 	orr.w	r2, r2, #1
 80058ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d0:	e007      	b.n	80058e2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0201 	orr.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	40012c00 	.word	0x40012c00
 80058f0:	40000400 	.word	0x40000400
 80058f4:	40000800 	.word	0x40000800

080058f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b02      	cmp	r3, #2
 800590c:	d122      	bne.n	8005954 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b02      	cmp	r3, #2
 800591a:	d11b      	bne.n	8005954 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f06f 0202 	mvn.w	r2, #2
 8005924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fa7f 	bl	8005e3e <HAL_TIM_IC_CaptureCallback>
 8005940:	e005      	b.n	800594e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fa72 	bl	8005e2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fa81 	bl	8005e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b04      	cmp	r3, #4
 8005960:	d122      	bne.n	80059a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b04      	cmp	r3, #4
 800596e:	d11b      	bne.n	80059a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0204 	mvn.w	r2, #4
 8005978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2202      	movs	r2, #2
 800597e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fa55 	bl	8005e3e <HAL_TIM_IC_CaptureCallback>
 8005994:	e005      	b.n	80059a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fa48 	bl	8005e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fa57 	bl	8005e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b08      	cmp	r3, #8
 80059b4:	d122      	bne.n	80059fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f003 0308 	and.w	r3, r3, #8
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d11b      	bne.n	80059fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0208 	mvn.w	r2, #8
 80059cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2204      	movs	r2, #4
 80059d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fa2b 	bl	8005e3e <HAL_TIM_IC_CaptureCallback>
 80059e8:	e005      	b.n	80059f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fa1e 	bl	8005e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fa2d 	bl	8005e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	2b10      	cmp	r3, #16
 8005a08:	d122      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f003 0310 	and.w	r3, r3, #16
 8005a14:	2b10      	cmp	r3, #16
 8005a16:	d11b      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f06f 0210 	mvn.w	r2, #16
 8005a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2208      	movs	r2, #8
 8005a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fa01 	bl	8005e3e <HAL_TIM_IC_CaptureCallback>
 8005a3c:	e005      	b.n	8005a4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f9f4 	bl	8005e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fa03 	bl	8005e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d10e      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d107      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f06f 0201 	mvn.w	r2, #1
 8005a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f9cf 	bl	8005e1a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a86:	2b80      	cmp	r3, #128	; 0x80
 8005a88:	d10e      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a94:	2b80      	cmp	r3, #128	; 0x80
 8005a96:	d107      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fcf1 	bl	800648a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	d10e      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac0:	2b40      	cmp	r3, #64	; 0x40
 8005ac2:	d107      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f9c7 	bl	8005e62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b20      	cmp	r3, #32
 8005ae0:	d10e      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f003 0320 	and.w	r3, r3, #32
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	d107      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f06f 0220 	mvn.w	r2, #32
 8005af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fcbc 	bl	8006478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b00:	bf00      	nop
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d101      	bne.n	8005b26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e0ae      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b0c      	cmp	r3, #12
 8005b32:	f200 809f 	bhi.w	8005c74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b36:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3c:	08005b71 	.word	0x08005b71
 8005b40:	08005c75 	.word	0x08005c75
 8005b44:	08005c75 	.word	0x08005c75
 8005b48:	08005c75 	.word	0x08005c75
 8005b4c:	08005bb1 	.word	0x08005bb1
 8005b50:	08005c75 	.word	0x08005c75
 8005b54:	08005c75 	.word	0x08005c75
 8005b58:	08005c75 	.word	0x08005c75
 8005b5c:	08005bf3 	.word	0x08005bf3
 8005b60:	08005c75 	.word	0x08005c75
 8005b64:	08005c75 	.word	0x08005c75
 8005b68:	08005c75 	.word	0x08005c75
 8005b6c:	08005c33 	.word	0x08005c33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 f9de 	bl	8005f38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0208 	orr.w	r2, r2, #8
 8005b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699a      	ldr	r2, [r3, #24]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0204 	bic.w	r2, r2, #4
 8005b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6999      	ldr	r1, [r3, #24]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	619a      	str	r2, [r3, #24]
      break;
 8005bae:	e064      	b.n	8005c7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fa24 	bl	8006004 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699a      	ldr	r2, [r3, #24]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6999      	ldr	r1, [r3, #24]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	021a      	lsls	r2, r3, #8
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	619a      	str	r2, [r3, #24]
      break;
 8005bf0:	e043      	b.n	8005c7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fa6d 	bl	80060d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0208 	orr.w	r2, r2, #8
 8005c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69da      	ldr	r2, [r3, #28]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0204 	bic.w	r2, r2, #4
 8005c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69d9      	ldr	r1, [r3, #28]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	691a      	ldr	r2, [r3, #16]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	61da      	str	r2, [r3, #28]
      break;
 8005c30:	e023      	b.n	8005c7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 fab7 	bl	80061ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69da      	ldr	r2, [r3, #28]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69d9      	ldr	r1, [r3, #28]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	021a      	lsls	r2, r3, #8
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	61da      	str	r2, [r3, #28]
      break;
 8005c72:	e002      	b.n	8005c7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	75fb      	strb	r3, [r7, #23]
      break;
 8005c78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e0b4      	b.n	8005e12 <HAL_TIM_ConfigClockSource+0x186>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce0:	d03e      	beq.n	8005d60 <HAL_TIM_ConfigClockSource+0xd4>
 8005ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce6:	f200 8087 	bhi.w	8005df8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cee:	f000 8086 	beq.w	8005dfe <HAL_TIM_ConfigClockSource+0x172>
 8005cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf6:	d87f      	bhi.n	8005df8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf8:	2b70      	cmp	r3, #112	; 0x70
 8005cfa:	d01a      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0xa6>
 8005cfc:	2b70      	cmp	r3, #112	; 0x70
 8005cfe:	d87b      	bhi.n	8005df8 <HAL_TIM_ConfigClockSource+0x16c>
 8005d00:	2b60      	cmp	r3, #96	; 0x60
 8005d02:	d050      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x11a>
 8005d04:	2b60      	cmp	r3, #96	; 0x60
 8005d06:	d877      	bhi.n	8005df8 <HAL_TIM_ConfigClockSource+0x16c>
 8005d08:	2b50      	cmp	r3, #80	; 0x50
 8005d0a:	d03c      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0xfa>
 8005d0c:	2b50      	cmp	r3, #80	; 0x50
 8005d0e:	d873      	bhi.n	8005df8 <HAL_TIM_ConfigClockSource+0x16c>
 8005d10:	2b40      	cmp	r3, #64	; 0x40
 8005d12:	d058      	beq.n	8005dc6 <HAL_TIM_ConfigClockSource+0x13a>
 8005d14:	2b40      	cmp	r3, #64	; 0x40
 8005d16:	d86f      	bhi.n	8005df8 <HAL_TIM_ConfigClockSource+0x16c>
 8005d18:	2b30      	cmp	r3, #48	; 0x30
 8005d1a:	d064      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x15a>
 8005d1c:	2b30      	cmp	r3, #48	; 0x30
 8005d1e:	d86b      	bhi.n	8005df8 <HAL_TIM_ConfigClockSource+0x16c>
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d060      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x15a>
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d867      	bhi.n	8005df8 <HAL_TIM_ConfigClockSource+0x16c>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d05c      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x15a>
 8005d2c:	2b10      	cmp	r3, #16
 8005d2e:	d05a      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x15a>
 8005d30:	e062      	b.n	8005df8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6899      	ldr	r1, [r3, #8]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f000 faf8 	bl	8006336 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	609a      	str	r2, [r3, #8]
      break;
 8005d5e:	e04f      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	6899      	ldr	r1, [r3, #8]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f000 fae1 	bl	8006336 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d82:	609a      	str	r2, [r3, #8]
      break;
 8005d84:	e03c      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6818      	ldr	r0, [r3, #0]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	6859      	ldr	r1, [r3, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	461a      	mov	r2, r3
 8005d94:	f000 fa58 	bl	8006248 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2150      	movs	r1, #80	; 0x50
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 faaf 	bl	8006302 <TIM_ITRx_SetConfig>
      break;
 8005da4:	e02c      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6818      	ldr	r0, [r3, #0]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6859      	ldr	r1, [r3, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	461a      	mov	r2, r3
 8005db4:	f000 fa76 	bl	80062a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2160      	movs	r1, #96	; 0x60
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fa9f 	bl	8006302 <TIM_ITRx_SetConfig>
      break;
 8005dc4:	e01c      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6818      	ldr	r0, [r3, #0]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	6859      	ldr	r1, [r3, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f000 fa38 	bl	8006248 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2140      	movs	r1, #64	; 0x40
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fa8f 	bl	8006302 <TIM_ITRx_SetConfig>
      break;
 8005de4:	e00c      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4619      	mov	r1, r3
 8005df0:	4610      	mov	r0, r2
 8005df2:	f000 fa86 	bl	8006302 <TIM_ITRx_SetConfig>
      break;
 8005df6:	e003      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005dfc:	e000      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr

08005e2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bc80      	pop	{r7}
 8005e3c:	4770      	bx	lr

08005e3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr

08005e62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bc80      	pop	{r7}
 8005e72:	4770      	bx	lr

08005e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a29      	ldr	r2, [pc, #164]	; (8005f2c <TIM_Base_SetConfig+0xb8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00b      	beq.n	8005ea4 <TIM_Base_SetConfig+0x30>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e92:	d007      	beq.n	8005ea4 <TIM_Base_SetConfig+0x30>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a26      	ldr	r2, [pc, #152]	; (8005f30 <TIM_Base_SetConfig+0xbc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_Base_SetConfig+0x30>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a25      	ldr	r2, [pc, #148]	; (8005f34 <TIM_Base_SetConfig+0xc0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d108      	bne.n	8005eb6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a1c      	ldr	r2, [pc, #112]	; (8005f2c <TIM_Base_SetConfig+0xb8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00b      	beq.n	8005ed6 <TIM_Base_SetConfig+0x62>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec4:	d007      	beq.n	8005ed6 <TIM_Base_SetConfig+0x62>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a19      	ldr	r2, [pc, #100]	; (8005f30 <TIM_Base_SetConfig+0xbc>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d003      	beq.n	8005ed6 <TIM_Base_SetConfig+0x62>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a18      	ldr	r2, [pc, #96]	; (8005f34 <TIM_Base_SetConfig+0xc0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d108      	bne.n	8005ee8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a07      	ldr	r2, [pc, #28]	; (8005f2c <TIM_Base_SetConfig+0xb8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d103      	bne.n	8005f1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	691a      	ldr	r2, [r3, #16]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	615a      	str	r2, [r3, #20]
}
 8005f22:	bf00      	nop
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bc80      	pop	{r7}
 8005f2a:	4770      	bx	lr
 8005f2c:	40012c00 	.word	0x40012c00
 8005f30:	40000400 	.word	0x40000400
 8005f34:	40000800 	.word	0x40000800

08005f38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	f023 0201 	bic.w	r2, r3, #1
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0303 	bic.w	r3, r3, #3
 8005f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f023 0302 	bic.w	r3, r3, #2
 8005f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a1c      	ldr	r2, [pc, #112]	; (8006000 <TIM_OC1_SetConfig+0xc8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d10c      	bne.n	8005fae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f023 0308 	bic.w	r3, r3, #8
 8005f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f023 0304 	bic.w	r3, r3, #4
 8005fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a13      	ldr	r2, [pc, #76]	; (8006000 <TIM_OC1_SetConfig+0xc8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d111      	bne.n	8005fda <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	621a      	str	r2, [r3, #32]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bc80      	pop	{r7}
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40012c00 	.word	0x40012c00

08006004 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f023 0210 	bic.w	r2, r3, #16
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	021b      	lsls	r3, r3, #8
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f023 0320 	bic.w	r3, r3, #32
 800604e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	4313      	orrs	r3, r2
 800605a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a1d      	ldr	r2, [pc, #116]	; (80060d4 <TIM_OC2_SetConfig+0xd0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d10d      	bne.n	8006080 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800606a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800607e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a14      	ldr	r2, [pc, #80]	; (80060d4 <TIM_OC2_SetConfig+0xd0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d113      	bne.n	80060b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800608e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006096:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	621a      	str	r2, [r3, #32]
}
 80060ca:	bf00      	nop
 80060cc:	371c      	adds	r7, #28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bc80      	pop	{r7}
 80060d2:	4770      	bx	lr
 80060d4:	40012c00 	.word	0x40012c00

080060d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	021b      	lsls	r3, r3, #8
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a1d      	ldr	r2, [pc, #116]	; (80061a8 <TIM_OC3_SetConfig+0xd0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d10d      	bne.n	8006152 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800613c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a14      	ldr	r2, [pc, #80]	; (80061a8 <TIM_OC3_SetConfig+0xd0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d113      	bne.n	8006182 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	4313      	orrs	r3, r2
 8006174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	621a      	str	r2, [r3, #32]
}
 800619c:	bf00      	nop
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bc80      	pop	{r7}
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40012c00 	.word	0x40012c00

080061ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	021b      	lsls	r3, r3, #8
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	031b      	lsls	r3, r3, #12
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	4313      	orrs	r3, r2
 8006202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a0f      	ldr	r2, [pc, #60]	; (8006244 <TIM_OC4_SetConfig+0x98>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d109      	bne.n	8006220 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006212:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	019b      	lsls	r3, r3, #6
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	621a      	str	r2, [r3, #32]
}
 800623a:	bf00      	nop
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	bc80      	pop	{r7}
 8006242:	4770      	bx	lr
 8006244:	40012c00 	.word	0x40012c00

08006248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	f023 0201 	bic.w	r2, r3, #1
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	011b      	lsls	r3, r3, #4
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f023 030a 	bic.w	r3, r3, #10
 8006284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	4313      	orrs	r3, r2
 800628c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	621a      	str	r2, [r3, #32]
}
 800629a:	bf00      	nop
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr

080062a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	f023 0210 	bic.w	r2, r3, #16
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	031b      	lsls	r3, r3, #12
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	621a      	str	r2, [r3, #32]
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bc80      	pop	{r7}
 8006300:	4770      	bx	lr

08006302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	f043 0307 	orr.w	r3, r3, #7
 8006324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	609a      	str	r2, [r3, #8]
}
 800632c:	bf00      	nop
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	4770      	bx	lr

08006336 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006336:	b480      	push	{r7}
 8006338:	b087      	sub	sp, #28
 800633a:	af00      	add	r7, sp, #0
 800633c:	60f8      	str	r0, [r7, #12]
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006350:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	021a      	lsls	r2, r3, #8
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	431a      	orrs	r2, r3
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	4313      	orrs	r3, r2
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	609a      	str	r2, [r3, #8]
}
 800636a:	bf00      	nop
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr

08006374 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f003 031f 	and.w	r3, r3, #31
 8006386:	2201      	movs	r2, #1
 8006388:	fa02 f303 	lsl.w	r3, r2, r3
 800638c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a1a      	ldr	r2, [r3, #32]
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	43db      	mvns	r3, r3
 8006396:	401a      	ands	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a1a      	ldr	r2, [r3, #32]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f003 031f 	and.w	r3, r3, #31
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	fa01 f303 	lsl.w	r3, r1, r3
 80063ac:	431a      	orrs	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	621a      	str	r2, [r3, #32]
}
 80063b2:	bf00      	nop
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e046      	b.n	8006462 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a16      	ldr	r2, [pc, #88]	; (800646c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00e      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006420:	d009      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a12      	ldr	r2, [pc, #72]	; (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d004      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a10      	ldr	r2, [pc, #64]	; (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d10c      	bne.n	8006450 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800643c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	4313      	orrs	r3, r2
 8006446:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	bc80      	pop	{r7}
 800646a:	4770      	bx	lr
 800646c:	40012c00 	.word	0x40012c00
 8006470:	40000400 	.word	0x40000400
 8006474:	40000800 	.word	0x40000800

08006478 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr

0800648a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	bc80      	pop	{r7}
 800649a:	4770      	bx	lr

0800649c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e042      	b.n	8006534 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7fc fb64 	bl	8002b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2224      	movs	r2, #36	; 0x24
 80064cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f82b 	bl	800653c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695a      	ldr	r2, [r3, #20]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006504:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68da      	ldr	r2, [r3, #12]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006514:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2220      	movs	r2, #32
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	4313      	orrs	r3, r2
 800656a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006576:	f023 030c 	bic.w	r3, r3, #12
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6812      	ldr	r2, [r2, #0]
 800657e:	68b9      	ldr	r1, [r7, #8]
 8006580:	430b      	orrs	r3, r1
 8006582:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a2c      	ldr	r2, [pc, #176]	; (8006650 <UART_SetConfig+0x114>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d103      	bne.n	80065ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80065a4:	f7fe ff56 	bl	8005454 <HAL_RCC_GetPCLK2Freq>
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	e002      	b.n	80065b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80065ac:	f7fe ff3e 	bl	800542c <HAL_RCC_GetPCLK1Freq>
 80065b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	4613      	mov	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	009a      	lsls	r2, r3, #2
 80065bc:	441a      	add	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c8:	4a22      	ldr	r2, [pc, #136]	; (8006654 <UART_SetConfig+0x118>)
 80065ca:	fba2 2303 	umull	r2, r3, r2, r3
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	0119      	lsls	r1, r3, #4
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4613      	mov	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	009a      	lsls	r2, r3, #2
 80065dc:	441a      	add	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80065e8:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <UART_SetConfig+0x118>)
 80065ea:	fba3 0302 	umull	r0, r3, r3, r2
 80065ee:	095b      	lsrs	r3, r3, #5
 80065f0:	2064      	movs	r0, #100	; 0x64
 80065f2:	fb00 f303 	mul.w	r3, r0, r3
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	011b      	lsls	r3, r3, #4
 80065fa:	3332      	adds	r3, #50	; 0x32
 80065fc:	4a15      	ldr	r2, [pc, #84]	; (8006654 <UART_SetConfig+0x118>)
 80065fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006608:	4419      	add	r1, r3
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	009a      	lsls	r2, r3, #2
 8006614:	441a      	add	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006620:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <UART_SetConfig+0x118>)
 8006622:	fba3 0302 	umull	r0, r3, r3, r2
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	2064      	movs	r0, #100	; 0x64
 800662a:	fb00 f303 	mul.w	r3, r0, r3
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	3332      	adds	r3, #50	; 0x32
 8006634:	4a07      	ldr	r2, [pc, #28]	; (8006654 <UART_SetConfig+0x118>)
 8006636:	fba2 2303 	umull	r2, r3, r2, r3
 800663a:	095b      	lsrs	r3, r3, #5
 800663c:	f003 020f 	and.w	r2, r3, #15
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	440a      	add	r2, r1
 8006646:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006648:	bf00      	nop
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	40013800 	.word	0x40013800
 8006654:	51eb851f 	.word	0x51eb851f

08006658 <__errno>:
 8006658:	4b01      	ldr	r3, [pc, #4]	; (8006660 <__errno+0x8>)
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	20000054 	.word	0x20000054

08006664 <__libc_init_array>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	2600      	movs	r6, #0
 8006668:	4d0c      	ldr	r5, [pc, #48]	; (800669c <__libc_init_array+0x38>)
 800666a:	4c0d      	ldr	r4, [pc, #52]	; (80066a0 <__libc_init_array+0x3c>)
 800666c:	1b64      	subs	r4, r4, r5
 800666e:	10a4      	asrs	r4, r4, #2
 8006670:	42a6      	cmp	r6, r4
 8006672:	d109      	bne.n	8006688 <__libc_init_array+0x24>
 8006674:	f000 f88e 	bl	8006794 <_init>
 8006678:	2600      	movs	r6, #0
 800667a:	4d0a      	ldr	r5, [pc, #40]	; (80066a4 <__libc_init_array+0x40>)
 800667c:	4c0a      	ldr	r4, [pc, #40]	; (80066a8 <__libc_init_array+0x44>)
 800667e:	1b64      	subs	r4, r4, r5
 8006680:	10a4      	asrs	r4, r4, #2
 8006682:	42a6      	cmp	r6, r4
 8006684:	d105      	bne.n	8006692 <__libc_init_array+0x2e>
 8006686:	bd70      	pop	{r4, r5, r6, pc}
 8006688:	f855 3b04 	ldr.w	r3, [r5], #4
 800668c:	4798      	blx	r3
 800668e:	3601      	adds	r6, #1
 8006690:	e7ee      	b.n	8006670 <__libc_init_array+0xc>
 8006692:	f855 3b04 	ldr.w	r3, [r5], #4
 8006696:	4798      	blx	r3
 8006698:	3601      	adds	r6, #1
 800669a:	e7f2      	b.n	8006682 <__libc_init_array+0x1e>
 800669c:	080067d8 	.word	0x080067d8
 80066a0:	080067d8 	.word	0x080067d8
 80066a4:	080067d8 	.word	0x080067d8
 80066a8:	080067dc 	.word	0x080067dc

080066ac <memset>:
 80066ac:	4603      	mov	r3, r0
 80066ae:	4402      	add	r2, r0
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d100      	bne.n	80066b6 <memset+0xa>
 80066b4:	4770      	bx	lr
 80066b6:	f803 1b01 	strb.w	r1, [r3], #1
 80066ba:	e7f9      	b.n	80066b0 <memset+0x4>

080066bc <sqrtf>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	4605      	mov	r5, r0
 80066c0:	f000 f816 	bl	80066f0 <__ieee754_sqrtf>
 80066c4:	4629      	mov	r1, r5
 80066c6:	4604      	mov	r4, r0
 80066c8:	4628      	mov	r0, r5
 80066ca:	f7fa fc33 	bl	8000f34 <__aeabi_fcmpun>
 80066ce:	b968      	cbnz	r0, 80066ec <sqrtf+0x30>
 80066d0:	2100      	movs	r1, #0
 80066d2:	4628      	mov	r0, r5
 80066d4:	f7fa fc06 	bl	8000ee4 <__aeabi_fcmplt>
 80066d8:	b140      	cbz	r0, 80066ec <sqrtf+0x30>
 80066da:	f7ff ffbd 	bl	8006658 <__errno>
 80066de:	2321      	movs	r3, #33	; 0x21
 80066e0:	2100      	movs	r1, #0
 80066e2:	6003      	str	r3, [r0, #0]
 80066e4:	4608      	mov	r0, r1
 80066e6:	f7fa fb13 	bl	8000d10 <__aeabi_fdiv>
 80066ea:	4604      	mov	r4, r0
 80066ec:	4620      	mov	r0, r4
 80066ee:	bd38      	pop	{r3, r4, r5, pc}

080066f0 <__ieee754_sqrtf>:
 80066f0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80066f4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80066f8:	b570      	push	{r4, r5, r6, lr}
 80066fa:	4603      	mov	r3, r0
 80066fc:	4604      	mov	r4, r0
 80066fe:	d309      	bcc.n	8006714 <__ieee754_sqrtf+0x24>
 8006700:	4601      	mov	r1, r0
 8006702:	f7fa fa51 	bl	8000ba8 <__aeabi_fmul>
 8006706:	4601      	mov	r1, r0
 8006708:	4620      	mov	r0, r4
 800670a:	f7fa f945 	bl	8000998 <__addsf3>
 800670e:	4604      	mov	r4, r0
 8006710:	4620      	mov	r0, r4
 8006712:	bd70      	pop	{r4, r5, r6, pc}
 8006714:	2a00      	cmp	r2, #0
 8006716:	d0fb      	beq.n	8006710 <__ieee754_sqrtf+0x20>
 8006718:	2800      	cmp	r0, #0
 800671a:	da06      	bge.n	800672a <__ieee754_sqrtf+0x3a>
 800671c:	4601      	mov	r1, r0
 800671e:	f7fa f939 	bl	8000994 <__aeabi_fsub>
 8006722:	4601      	mov	r1, r0
 8006724:	f7fa faf4 	bl	8000d10 <__aeabi_fdiv>
 8006728:	e7f1      	b.n	800670e <__ieee754_sqrtf+0x1e>
 800672a:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800672e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8006732:	d029      	beq.n	8006788 <__ieee754_sqrtf+0x98>
 8006734:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8006738:	07cb      	lsls	r3, r1, #31
 800673a:	f04f 0300 	mov.w	r3, #0
 800673e:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8006742:	f04f 0419 	mov.w	r4, #25
 8006746:	461e      	mov	r6, r3
 8006748:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800674c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006750:	bf58      	it	pl
 8006752:	0052      	lslpl	r2, r2, #1
 8006754:	1040      	asrs	r0, r0, #1
 8006756:	0052      	lsls	r2, r2, #1
 8006758:	1875      	adds	r5, r6, r1
 800675a:	4295      	cmp	r5, r2
 800675c:	bfde      	ittt	le
 800675e:	186e      	addle	r6, r5, r1
 8006760:	1b52      	suble	r2, r2, r5
 8006762:	185b      	addle	r3, r3, r1
 8006764:	3c01      	subs	r4, #1
 8006766:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800676a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800676e:	d1f3      	bne.n	8006758 <__ieee754_sqrtf+0x68>
 8006770:	b112      	cbz	r2, 8006778 <__ieee754_sqrtf+0x88>
 8006772:	3301      	adds	r3, #1
 8006774:	f023 0301 	bic.w	r3, r3, #1
 8006778:	105c      	asrs	r4, r3, #1
 800677a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800677e:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8006782:	e7c5      	b.n	8006710 <__ieee754_sqrtf+0x20>
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	3201      	adds	r2, #1
 8006788:	0218      	lsls	r0, r3, #8
 800678a:	d5fb      	bpl.n	8006784 <__ieee754_sqrtf+0x94>
 800678c:	3a01      	subs	r2, #1
 800678e:	1a89      	subs	r1, r1, r2
 8006790:	e7d0      	b.n	8006734 <__ieee754_sqrtf+0x44>
	...

08006794 <_init>:
 8006794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006796:	bf00      	nop
 8006798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679a:	bc08      	pop	{r3}
 800679c:	469e      	mov	lr, r3
 800679e:	4770      	bx	lr

080067a0 <_fini>:
 80067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a2:	bf00      	nop
 80067a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a6:	bc08      	pop	{r3}
 80067a8:	469e      	mov	lr, r3
 80067aa:	4770      	bx	lr
